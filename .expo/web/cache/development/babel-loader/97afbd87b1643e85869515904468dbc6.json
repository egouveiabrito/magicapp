{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Avatar = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _config = require(\"../config\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _Icon = _interopRequireDefault(require(\"../icons/Icon\"));\n\nvar _Image = _interopRequireDefault(require(\"../image/Image\"));\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-native-elements\\\\src\\\\avatar\\\\Avatar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar avatarSizes = {\n  small: 34,\n  medium: 50,\n  large: 75,\n  xlarge: 150\n};\nvar defaultEditButton = {\n  name: 'mode-edit',\n  type: 'material',\n  color: '#fff',\n  underlayColor: '#000'\n};\n\nvar Avatar = function Avatar(_ref) {\n  var onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View : _ref$Component,\n      containerStyle = _ref.containerStyle,\n      icon = _ref.icon,\n      iconStyle = _ref.iconStyle,\n      source = _ref.source,\n      size = _ref.size,\n      avatarStyle = _ref.avatarStyle,\n      rounded = _ref.rounded,\n      title = _ref.title,\n      titleStyle = _ref.titleStyle,\n      overlayContainerStyle = _ref.overlayContainerStyle,\n      showEditButton = _ref.showEditButton,\n      passedEditButton = _ref.editButton,\n      onEditPress = _ref.onEditPress,\n      imageProps = _ref.imageProps,\n      placeholderStyle = _ref.placeholderStyle,\n      renderPlaceholderContent = _ref.renderPlaceholderContent,\n      ImageComponent = _ref.ImageComponent,\n      attributes = (0, _objectWithoutProperties2.default)(_ref, [\"onPress\", \"onLongPress\", \"Component\", \"containerStyle\", \"icon\", \"iconStyle\", \"source\", \"size\", \"avatarStyle\", \"rounded\", \"title\", \"titleStyle\", \"overlayContainerStyle\", \"showEditButton\", \"editButton\", \"onEditPress\", \"imageProps\", \"placeholderStyle\", \"renderPlaceholderContent\", \"ImageComponent\"]);\n  var width = typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;\n  var height = width;\n  var titleSize = width / 2;\n  var iconSize = width / 2;\n\n  var editButton = _objectSpread({}, defaultEditButton, {}, passedEditButton);\n\n  var editButtonSize = editButton.size || (width + height) / 2 / 3;\n\n  var Utils = showEditButton && _react.default.createElement(_reactNative.TouchableHighlight, {\n    style: _reactNative.StyleSheet.flatten([styles.editButton, {\n      width: editButtonSize,\n      height: editButtonSize,\n      borderRadius: editButtonSize / 2\n    }, editButton.style]),\n    underlayColor: editButton.underlayColor,\n    onPress: onEditPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    }\n  }, _react.default.createElement(_Icon.default, (0, _extends2.default)({\n    size: editButtonSize * 0.8\n  }, editButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    }\n  }))));\n\n  var PlaceholderContent = renderPlaceholderContent && (0, _helpers.renderNode)(undefined, renderPlaceholderContent) || title && _react.default.createElement(_reactNative.Text, {\n    style: _reactNative.StyleSheet.flatten([styles.title, {\n      fontSize: titleSize\n    }, titleStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    }\n  }, title) || icon && _react.default.createElement(_Icon.default, {\n    style: iconStyle && iconStyle,\n    color: icon.color || 'white',\n    name: icon.name || 'user',\n    size: icon.size || iconSize,\n    type: icon.type && icon.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    }\n  });\n\n  var hidePlaceholder = !source;\n  return _react.default.createElement(Component, (0, _extends2.default)({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    style: _reactNative.StyleSheet.flatten([styles.container, {\n      height: height,\n      width: width\n    }, rounded && {\n      borderRadius: width / 2\n    }, containerStyle])\n  }, attributes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    }\n  }), _react.default.createElement(_Image.default, (0, _extends2.default)({\n    placeholderStyle: _reactNative.StyleSheet.flatten([placeholderStyle, hidePlaceholder && {\n      backgroundColor: 'transparent'\n    }]),\n    PlaceholderContent: PlaceholderContent,\n    containerStyle: _reactNative.StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle, rounded && {\n      borderRadius: width / 2,\n      overflow: 'hidden'\n    }]),\n    source: source\n  }, imageProps, {\n    style: _reactNative.StyleSheet.flatten([styles.avatar, imageProps && imageProps.style, avatarStyle]),\n    ImageComponent: ImageComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    }\n  })), Utils);\n};\n\nexports.Avatar = Avatar;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent'\n  },\n  avatar: {\n    flex: 1,\n    width: null,\n    height: null\n  },\n  overlayContainer: {\n    flex: 1,\n    backgroundColor: '#bdbdbd'\n  },\n  title: {\n    color: '#ffffff',\n    backgroundColor: 'transparent',\n    textAlign: 'center'\n  },\n  editButton: _objectSpread({\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa'\n  }, _reactNative.Platform.select({\n    android: {\n      elevation: 1\n    },\n    default: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 1,\n        height: 1\n      },\n      shadowRadius: 2,\n      shadowOpacity: 0.5\n    }\n  }))\n});\n\nAvatar.propTypes = {\n  Component: _propTypes.default.oneOf([_reactNative.View, _reactNative.TouchableOpacity, _reactNative.TouchableHighlight, _reactNative.TouchableNativeFeedback, _reactNative.TouchableWithoutFeedback]),\n  onPress: _propTypes.default.func,\n  onLongPress: _propTypes.default.func,\n  containerStyle: _config.ViewPropTypes.style,\n  source: _reactNative.Image.propTypes.source,\n  avatarStyle: _config.ViewPropTypes.style,\n  rounded: _propTypes.default.bool,\n  title: _propTypes.default.string,\n  titleStyle: _reactNative.Text.propTypes.style,\n  overlayContainerStyle: _config.ViewPropTypes.style,\n  activeOpacity: _propTypes.default.number,\n  icon: _propTypes.default.object,\n  iconStyle: _reactNative.Text.propTypes.style,\n  size: _propTypes.default.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large', 'xlarge']), _propTypes.default.number]),\n  showEditButton: _propTypes.default.bool,\n  onEditPress: _propTypes.default.func,\n  editButton: _propTypes.default.shape({\n    size: _propTypes.default.number,\n    name: _propTypes.default.string,\n    type: _propTypes.default.string,\n    color: _propTypes.default.string,\n    underlayColor: _propTypes.default.string,\n    style: _config.ViewPropTypes.style\n  }),\n  placeholderStyle: _config.ViewPropTypes.style,\n  renderPlaceholderContent: _helpers.nodeType,\n  imageProps: _propTypes.default.object,\n  ImageComponent: _propTypes.default.elementType\n};\nAvatar.defaultProps = {\n  showEditButton: false,\n  onEditPress: null,\n  size: 'small',\n  editButton: defaultEditButton,\n  ImageComponent: _reactNative.Image\n};\n\nvar _default = (0, _config.withTheme)(Avatar, 'Avatar');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-native-elements/src/avatar/Avatar.js"],"names":["avatarSizes","small","medium","large","xlarge","defaultEditButton","name","type","color","underlayColor","Avatar","onPress","onLongPress","Component","TouchableOpacity","View","containerStyle","icon","iconStyle","source","size","avatarStyle","rounded","title","titleStyle","overlayContainerStyle","showEditButton","passedEditButton","editButton","onEditPress","imageProps","placeholderStyle","renderPlaceholderContent","ImageComponent","attributes","width","height","titleSize","iconSize","editButtonSize","Utils","StyleSheet","flatten","styles","borderRadius","style","PlaceholderContent","undefined","fontSize","hidePlaceholder","container","backgroundColor","overlayContainer","overflow","avatar","create","flex","textAlign","position","bottom","right","alignItems","justifyContent","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowRadius","shadowOpacity","propTypes","PropTypes","oneOf","TouchableHighlight","TouchableNativeFeedback","TouchableWithoutFeedback","func","ViewPropTypes","RNImage","bool","string","Text","activeOpacity","number","object","oneOfType","shape","nodeType","elementType","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  Text,\n  Image as RNImage,\n  Platform,\n  StyleSheet,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport { withTheme, ViewPropTypes } from '../config';\nimport { renderNode, nodeType } from '../helpers';\n\nimport Icon from '../icons/Icon';\nimport Image from '../image/Image';\n\nconst avatarSizes = {\n  small: 34,\n  medium: 50,\n  large: 75,\n  xlarge: 150,\n};\n\nconst defaultEditButton = {\n  name: 'mode-edit',\n  type: 'material',\n  color: '#fff',\n  underlayColor: '#000',\n};\n\nconst Avatar = ({\n  onPress,\n  onLongPress,\n  Component = onPress || onLongPress ? TouchableOpacity : View,\n  containerStyle,\n  icon,\n  iconStyle,\n  source,\n  size,\n  avatarStyle,\n  rounded,\n  title,\n  titleStyle,\n  overlayContainerStyle,\n  showEditButton,\n  editButton: passedEditButton,\n  onEditPress,\n  imageProps,\n  placeholderStyle,\n  renderPlaceholderContent,\n  ImageComponent,\n  ...attributes\n}) => {\n  const width =\n    typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;\n  const height = width;\n  const titleSize = width / 2;\n  const iconSize = width / 2;\n\n  const editButton = {\n    ...defaultEditButton,\n    ...passedEditButton,\n  };\n  const editButtonSize = editButton.size || (width + height) / 2 / 3;\n\n  const Utils = showEditButton && (\n    <TouchableHighlight\n      style={StyleSheet.flatten([\n        styles.editButton,\n        {\n          width: editButtonSize,\n          height: editButtonSize,\n          borderRadius: editButtonSize / 2,\n        },\n        editButton.style,\n      ])}\n      underlayColor={editButton.underlayColor}\n      onPress={onEditPress}\n    >\n      <View>\n        <Icon size={editButtonSize * 0.8} {...editButton} />\n      </View>\n    </TouchableHighlight>\n  );\n\n  const PlaceholderContent =\n    (renderPlaceholderContent &&\n      renderNode(undefined, renderPlaceholderContent)) ||\n    (title && (\n      <Text\n        style={StyleSheet.flatten([\n          styles.title,\n          { fontSize: titleSize },\n          titleStyle,\n        ])}\n      >\n        {title}\n      </Text>\n    )) ||\n    (icon && (\n      <Icon\n        style={iconStyle && iconStyle}\n        color={icon.color || 'white'}\n        name={icon.name || 'user'}\n        size={icon.size || iconSize}\n        type={icon.type && icon.type}\n      />\n    ));\n\n  // Remove placeholder styling if we're not using image\n  const hidePlaceholder = !source;\n\n  return (\n    <Component\n      onPress={onPress}\n      onLongPress={onLongPress}\n      style={StyleSheet.flatten([\n        styles.container,\n        { height, width },\n        rounded && { borderRadius: width / 2 },\n        containerStyle,\n      ])}\n      {...attributes}\n    >\n      <Image\n        placeholderStyle={StyleSheet.flatten([\n          placeholderStyle,\n          hidePlaceholder && { backgroundColor: 'transparent' },\n        ])}\n        PlaceholderContent={PlaceholderContent}\n        containerStyle={StyleSheet.flatten([\n          styles.overlayContainer,\n          overlayContainerStyle,\n          rounded && { borderRadius: width / 2, overflow: 'hidden' },\n        ])}\n        source={source}\n        {...imageProps}\n        style={StyleSheet.flatten([\n          styles.avatar,\n          imageProps && imageProps.style,\n          avatarStyle,\n        ])}\n        ImageComponent={ImageComponent}\n      />\n      {Utils}\n    </Component>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n  },\n  avatar: {\n    flex: 1,\n    width: null,\n    height: null,\n  },\n  overlayContainer: {\n    flex: 1,\n    backgroundColor: '#bdbdbd',\n  },\n  title: {\n    color: '#ffffff',\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n  },\n  editButton: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa',\n    ...Platform.select({\n      android: {\n        elevation: 1,\n      },\n      default: {\n        shadowColor: '#000',\n        shadowOffset: { width: 1, height: 1 },\n        shadowRadius: 2,\n        shadowOpacity: 0.5,\n      },\n    }),\n  },\n});\n\nAvatar.propTypes = {\n  Component: PropTypes.oneOf([\n    View,\n    TouchableOpacity,\n    TouchableHighlight,\n    TouchableNativeFeedback,\n    TouchableWithoutFeedback,\n  ]),\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  containerStyle: ViewPropTypes.style,\n  source: RNImage.propTypes.source,\n  avatarStyle: ViewPropTypes.style,\n  rounded: PropTypes.bool,\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  overlayContainerStyle: ViewPropTypes.style,\n  activeOpacity: PropTypes.number,\n  icon: PropTypes.object,\n  iconStyle: Text.propTypes.style,\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']),\n    PropTypes.number,\n  ]),\n  showEditButton: PropTypes.bool,\n  onEditPress: PropTypes.func,\n  editButton: PropTypes.shape({\n    size: PropTypes.number,\n    name: PropTypes.string,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    underlayColor: PropTypes.string,\n    style: ViewPropTypes.style,\n  }),\n  placeholderStyle: ViewPropTypes.style,\n  renderPlaceholderContent: nodeType,\n  imageProps: PropTypes.object,\n  ImageComponent: PropTypes.elementType,\n};\n\nAvatar.defaultProps = {\n  showEditButton: false,\n  onEditPress: null,\n  size: 'small',\n  editButton: defaultEditButton,\n  ImageComponent: RNImage,\n};\n\nexport { Avatar };\nexport default withTheme(Avatar, 'Avatar');\n"]},"metadata":{},"sourceType":"script"}