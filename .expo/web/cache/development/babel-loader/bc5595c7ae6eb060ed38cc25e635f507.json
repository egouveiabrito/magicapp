{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _NavigationActions = _interopRequireDefault(require(\"../NavigationActions\"));\n\nvar _invariant = _interopRequireDefault(require(\"../utils/invariant\"));\n\nvar getNavigationActionCreators = function getNavigationActionCreators(route) {\n  return {\n    goBack: function goBack(key) {\n      var actualizedKey = key;\n\n      if (key === undefined && route.key) {\n        (0, _invariant.default)(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n\n      return _NavigationActions.default.back({\n        key: actualizedKey\n      });\n    },\n    navigate: function navigate(navigateTo, params, action) {\n      if (typeof navigateTo === 'string') {\n        return _NavigationActions.default.navigate({\n          routeName: navigateTo,\n          params: params,\n          action: action\n        });\n      }\n\n      (0, _invariant.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');\n      (0, _invariant.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');\n      (0, _invariant.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');\n      return _NavigationActions.default.navigate(navigateTo);\n    },\n    setParams: function setParams(params) {\n      (0, _invariant.default)(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');\n      return _NavigationActions.default.setParams({\n        params: params,\n        key: route.key\n      });\n    }\n  };\n};\n\nvar _default = getNavigationActionCreators;\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation/src/routers/getNavigationActionCreators.js"],"names":["getNavigationActionCreators","route","goBack","key","actualizedKey","undefined","NavigationActions","back","navigate","navigateTo","params","action","routeName","setParams"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAAC,KAAK,EAAI;AAC3C,SAAO;AACLC,IAAAA,MAAM,EAAE,gBAAAC,GAAG,EAAI;AACb,UAAIC,aAAa,GAAGD,GAApB;;AACA,UAAIA,GAAG,KAAKE,SAAR,IAAqBJ,KAAK,CAACE,GAA/B,EAAoC;AAClC,gCAAU,OAAOF,KAAK,CAACE,GAAb,KAAqB,QAA/B,EAAyC,wBAAzC;AACAC,QAAAA,aAAa,GAAGH,KAAK,CAACE,GAAtB;AACD;;AACD,aAAOG,2BAAkBC,IAAlB,CAAuB;AAAEJ,QAAAA,GAAG,EAAEC;AAAP,OAAvB,CAAP;AACD,KARI;AASLI,IAAAA,QAAQ,EAAE,kBAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,EAAgC;AACxC,UAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClC,eAAOH,2BAAkBE,QAAlB,CAA2B;AAChCI,UAAAA,SAAS,EAAEH,UADqB;AAEhCC,UAAAA,MAAM,EAANA,MAFgC;AAGhCC,UAAAA,MAAM,EAANA;AAHgC,SAA3B,CAAP;AAKD;;AACD,8BACE,OAAOF,UAAP,KAAsB,QADxB,EAEE,uCAFF;AAIA,8BACEC,MAAM,IAAI,IADZ,EAEE,sEAFF;AAIA,8BACEC,MAAM,IAAI,IADZ,EAEE,4EAFF;AAIA,aAAOL,2BAAkBE,QAAlB,CAA2BC,UAA3B,CAAP;AACD,KA9BI;AA+BLI,IAAAA,SAAS,EAAE,mBAAAH,MAAM,EAAI;AACnB,8BACET,KAAK,CAACE,GAAN,IAAa,OAAOF,KAAK,CAACE,GAAb,KAAqB,QADpC,EAEE,8CAFF;AAIA,aAAOG,2BAAkBO,SAAlB,CAA4B;AAAEH,QAAAA,MAAM,EAANA,MAAF;AAAUP,QAAAA,GAAG,EAAEF,KAAK,CAACE;AAArB,OAA5B,CAAP;AACD;AArCI,GAAP;AAuCD,CAxCD;;eA0CeH,2B","sourcesContent":["import NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]},"metadata":{},"sourceType":"script"}