{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _DrawerActions = _interopRequireDefault(require(\"./DrawerActions\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nvar getActiveRouteKey = function getActiveRouteKey(route) {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nvar _default = function _default(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', false);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = (0, _reactNavigation.SwitchRouter)(routeConfigs, config);\n  return _objectSpread({}, switchRouter, {\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: function openDrawer() {\n          return _DrawerActions.default.openDrawer({\n            key: navStateKey\n          });\n        },\n        closeDrawer: function closeDrawer() {\n          return _DrawerActions.default.closeDrawer({\n            key: navStateKey\n          });\n        },\n        toggleDrawer: function toggleDrawer() {\n          return _DrawerActions.default.toggleDrawer({\n            key: navStateKey\n          });\n        }\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return _objectSpread({}, switchRouter.getStateForAction(action, undefined), {\n          isDrawerOpen: false,\n          openId: 0,\n          closeId: 0,\n          toggleId: 0\n        });\n      }\n\n      var isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        if (action.type === _DrawerActions.default.DRAWER_CLOSED) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: false\n          });\n        }\n\n        if (action.type === _DrawerActions.default.DRAWER_OPENED) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: true\n          });\n        }\n\n        if (action.type === _DrawerActions.default.CLOSE_DRAWER) {\n          return _objectSpread({}, state, {\n            closeId: state.closeId + 1\n          });\n        }\n\n        if (action.type === _reactNavigation.NavigationActions.BACK && state.isDrawerOpen) {\n          return _objectSpread({}, state, {\n            closeId: state.closeId + 1\n          });\n        }\n\n        if (action.type === _DrawerActions.default.OPEN_DRAWER) {\n          return _objectSpread({}, state, {\n            openId: state.openId + 1\n          });\n        }\n\n        if (action.type === _DrawerActions.default.TOGGLE_DRAWER) {\n          return _objectSpread({}, state, {\n            toggleId: state.toggleId + 1\n          });\n        }\n      }\n\n      var switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state)) {\n          return _objectSpread({}, switchedState, {\n            closeId: state.closeId + 1\n          });\n        }\n\n        return switchedState;\n      }\n\n      return state;\n    }\n  });\n};\n\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-drawer/dist/routers/DrawerRouter.js"],"names":["withDefaultValue","obj","key","defaultValue","hasOwnProperty","getActiveRouteKey","route","routes","index","routeConfigs","config","switchRouter","getActionCreators","navStateKey","openDrawer","DrawerActions","closeDrawer","toggleDrawer","getStateForAction","action","state","undefined","isDrawerOpen","openId","closeId","toggleId","isRouterTargeted","type","DRAWER_CLOSED","DRAWER_OPENED","CLOSE_DRAWER","NavigationActions","BACK","OPEN_DRAWER","TOGGLE_DRAWER","switchedState"],"mappings":"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","sourcesContent":["import { SwitchRouter, NavigationActions } from 'react-navigation';\nimport DrawerActions from './DrawerActions';\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = route => {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n  return route.key;\n};\n\nexport default ((routeConfigs, config = {}) => {\n  config = { ...config };\n  config = withDefaultValue(config, 'resetOnBlur', false);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route, navStateKey) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey)\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n          openId: 0,\n          closeId: 0,\n          toggleId: 0\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\n          return {\n            ...state,\n            isDrawerOpen: false\n          };\n        }\n\n        if (action.type === DrawerActions.DRAWER_OPENED) {\n          return {\n            ...state,\n            isDrawerOpen: true\n          };\n        }\n\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\n          return {\n            ...state,\n            closeId: state.closeId + 1\n          };\n        }\n\n        if (action.type === NavigationActions.BACK && state.isDrawerOpen) {\n          return {\n            ...state,\n            closeId: state.closeId + 1\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            openId: state.openId + 1\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            toggleId: state.toggleId + 1\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state)) {\n          // If any navigation has happened, make sure to close the drawer\n          return {\n            ...switchedState,\n            closeId: state.closeId + 1\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    }\n  };\n});"]},"metadata":{},"sourceType":"script"}