{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CheckBox = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Text = _interopRequireDefault(require(\"../text/Text\"));\n\nvar _CheckBoxIcon = _interopRequireDefault(require(\"./CheckBoxIcon\"));\n\nvar _config = require(\"../config\");\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-native-elements\\\\src\\\\checkbox\\\\CheckBox.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar CheckBox = function CheckBox(props) {\n  var theme = props.theme,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"theme\"]);\n  var Component = rest.Component,\n      checked = rest.checked,\n      iconRight = rest.iconRight,\n      title = rest.title,\n      titleProps = rest.titleProps,\n      center = rest.center,\n      right = rest.right,\n      containerStyle = rest.containerStyle,\n      textStyle = rest.textStyle,\n      wrapperStyle = rest.wrapperStyle,\n      onPress = rest.onPress,\n      onLongPress = rest.onLongPress,\n      checkedTitle = rest.checkedTitle,\n      fontFamily = rest.fontFamily,\n      _rest$checkedColor = rest.checkedColor,\n      checkedColor = _rest$checkedColor === void 0 ? theme.colors.primary : _rest$checkedColor,\n      attributes = (0, _objectWithoutProperties2.default)(rest, [\"Component\", \"checked\", \"iconRight\", \"title\", \"titleProps\", \"center\", \"right\", \"containerStyle\", \"textStyle\", \"wrapperStyle\", \"onPress\", \"onLongPress\", \"checkedTitle\", \"fontFamily\", \"checkedColor\"]);\n  return _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {\n    testID: \"checkbox\",\n    onLongPress: onLongPress,\n    onPress: onPress,\n    style: _reactNative.StyleSheet.flatten([styles.container, title && styles.containerHasTitle, containerStyle && containerStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: _reactNative.StyleSheet.flatten([styles.wrapper, right && {\n      justifyContent: 'flex-end'\n    }, center && {\n      justifyContent: 'center'\n    }, wrapperStyle && wrapperStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    }\n  }, !iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {\n    checkedColor: checkedColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    }\n  })), _react.default.isValidElement(title) ? title : title && _react.default.createElement(_Text.default, (0, _extends2.default)({\n    testID: \"checkboxTitle\",\n    style: _reactNative.StyleSheet.flatten([styles.text(theme), textStyle && textStyle, fontFamily && {\n      fontFamily: fontFamily\n    }])\n  }, titleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    }\n  }), checked ? checkedTitle || title : title), iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {\n    checkedColor: checkedColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    }\n  }))));\n};\n\nexports.CheckBox = CheckBox;\nCheckBox.propTypes = _objectSpread({}, _CheckBoxIcon.default.propTypes, {\n  Component: _propTypes.default.elementType,\n  iconRight: _propTypes.default.bool,\n  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),\n  titleProps: _propTypes.default.object,\n  center: _propTypes.default.bool,\n  right: _propTypes.default.bool,\n  containerStyle: _config.ViewPropTypes.style,\n  wrapperStyle: _config.ViewPropTypes.style,\n  textStyle: _reactNative.Text.propTypes.style,\n  onPress: _propTypes.default.func,\n  onLongPress: _propTypes.default.func,\n  checkedTitle: _propTypes.default.string,\n  fontFamily: _propTypes.default.string\n});\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24,\n  Component: _reactNative.TouchableOpacity,\n  titleProps: {}\n};\nvar styles = {\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    padding: 10\n  },\n  containerHasTitle: {\n    borderWidth: 1,\n    borderRadius: 3,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed'\n  },\n  text: function text(theme) {\n    return _objectSpread({\n      marginLeft: 10,\n      marginRight: 10,\n      color: theme.colors.grey1\n    }, _reactNative.Platform.select({\n      android: _objectSpread({}, _config.fonts.android.bold),\n      default: {\n        fontWeight: 'bold'\n      }\n    }));\n  }\n};\n\nvar _default = (0, _config.withTheme)(CheckBox, 'CheckBox');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-native-elements/src/checkbox/CheckBox.js"],"names":["CheckBox","props","theme","rest","Component","checked","iconRight","title","titleProps","center","right","containerStyle","textStyle","wrapperStyle","onPress","onLongPress","checkedTitle","fontFamily","checkedColor","colors","primary","attributes","StyleSheet","flatten","styles","container","containerHasTitle","wrapper","justifyContent","React","isValidElement","text","propTypes","CheckBoxIcon","PropTypes","elementType","bool","oneOfType","string","element","object","ViewPropTypes","style","NativeText","func","defaultProps","uncheckedColor","checkedIcon","uncheckedIcon","size","TouchableOpacity","flexDirection","alignItems","margin","marginLeft","marginRight","padding","borderWidth","borderRadius","backgroundColor","borderColor","color","grey1","Platform","select","android","fonts","bold","default","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  Platform,\n  Text as NativeText,\n} from 'react-native';\n\nimport TextElement from '../text/Text';\nimport CheckBoxIcon from './CheckBoxIcon';\nimport { fonts, ViewPropTypes, withTheme } from '../config';\n\nconst CheckBox = props => {\n  const { theme, ...rest } = props;\n\n  const {\n    Component,\n    checked,\n    iconRight,\n    title,\n    titleProps,\n    center,\n    right,\n    containerStyle,\n    textStyle,\n    wrapperStyle,\n    onPress,\n    onLongPress,\n    checkedTitle,\n    fontFamily,\n    checkedColor = theme.colors.primary,\n    ...attributes\n  } = rest;\n\n  return (\n    <Component\n      {...attributes}\n      testID=\"checkbox\"\n      onLongPress={onLongPress}\n      onPress={onPress}\n      style={StyleSheet.flatten([\n        styles.container,\n        title && styles.containerHasTitle,\n        containerStyle && containerStyle,\n      ])}\n    >\n      <View\n        style={StyleSheet.flatten([\n          styles.wrapper,\n          right && { justifyContent: 'flex-end' },\n          center && { justifyContent: 'center' },\n          wrapperStyle && wrapperStyle,\n        ])}\n      >\n        {!iconRight && <CheckBoxIcon {...props} checkedColor={checkedColor} />}\n\n        {React.isValidElement(title)\n          ? title\n          : title && (\n              <TextElement\n                testID=\"checkboxTitle\"\n                style={StyleSheet.flatten([\n                  styles.text(theme),\n                  textStyle && textStyle,\n                  fontFamily && { fontFamily },\n                ])}\n                {...titleProps}\n              >\n                {checked ? checkedTitle || title : title}\n              </TextElement>\n            )}\n\n        {iconRight && <CheckBoxIcon {...props} checkedColor={checkedColor} />}\n      </View>\n    </Component>\n  );\n};\nCheckBox.propTypes = {\n  ...CheckBoxIcon.propTypes,\n  Component: PropTypes.elementType,\n  iconRight: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  titleProps: PropTypes.object,\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  wrapperStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  checkedTitle: PropTypes.string,\n  fontFamily: PropTypes.string,\n};\n\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24,\n  Component: TouchableOpacity,\n  titleProps: {},\n};\n\nconst styles = {\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    padding: 10,\n  },\n  containerHasTitle: {\n    borderWidth: 1,\n    borderRadius: 3,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed',\n  },\n  text: theme => ({\n    marginLeft: 10,\n    marginRight: 10,\n    color: theme.colors.grey1,\n    ...Platform.select({\n      android: {\n        ...fonts.android.bold,\n      },\n      default: {\n        fontWeight: 'bold',\n      },\n    }),\n  }),\n};\n\nexport { CheckBox };\nexport default withTheme(CheckBox, 'CheckBox');\n"]},"metadata":{},"sourceType":"script"}