{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _StackViewLayout = _interopRequireDefault(require(\"./StackViewLayout\"));\n\nvar _Transitioner = _interopRequireDefault(require(\"../Transitioner\"));\n\nvar _StackViewTransitionConfigs = _interopRequireDefault(require(\"./StackViewTransitionConfigs\"));\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\StackView\\\\StackView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar NativeAnimatedModule = _reactNative.NativeModules && _reactNative.NativeModules.NativeAnimatedModule;\n\nvar StackView = function (_React$Component) {\n  (0, _inherits2.default)(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._configureTransition = function (transitionProps, prevTransitionProps) {\n      return _objectSpread({}, _StackViewTransitionConfigs.default.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec, {\n        useNativeDriver: !!NativeAnimatedModule\n      });\n    };\n\n    _this._render = function (transitionProps, lastTransitionProps) {\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigationConfig = _this$props.navigationConfig;\n      return _react.default.createElement(_StackViewLayout.default, (0, _extends2.default)({}, navigationConfig, {\n        onGestureBegin: _this.props.onGestureBegin,\n        onGestureCanceled: _this.props.onGestureCanceled,\n        onGestureEnd: _this.props.onGestureEnd,\n        screenProps: screenProps,\n        descriptors: _this.props.descriptors,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_Transitioner.default, {\n        render: this._render,\n        configureTransition: this._configureTransition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n        onTransitionEnd: function onTransitionEnd(transition, lastTransition) {\n          var _this2$props = _this2.props,\n              navigationConfig = _this2$props.navigationConfig,\n              navigation = _this2$props.navigation;\n          var onTransitionEnd = _this2.props.onTransitionEnd || navigationConfig.onTransitionEnd;\n\n          if (transition.navigation.state.isTransitioning) {\n            navigation.dispatch(_reactNavigation.StackActions.completeTransition({\n              key: navigation.state.key\n            }));\n          }\n\n          onTransitionEnd && onTransitionEnd(transition, lastTransition);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation = this.props.navigation;\n\n      if (navigation.state.isTransitioning) {\n        navigation.dispatch(_reactNavigation.StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n    }\n  }]);\n  return StackView;\n}(_react.default.Component);\n\nStackView.defaultProps = {\n  navigationConfig: {\n    mode: 'card'\n  }\n};\nvar _default = StackView;\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-stack/dist/views/StackView/StackView.js"],"names":["NativeAnimatedModule","NativeModules","StackView","_configureTransition","transitionProps","prevTransitionProps","TransitionConfigs","getTransitionConfig","props","navigationConfig","transitionConfig","mode","transitionSpec","useNativeDriver","_render","lastTransitionProps","screenProps","onGestureBegin","onGestureCanceled","onGestureEnd","descriptors","navigation","onTransitionStart","transition","lastTransition","onTransitionEnd","state","isTransitioning","dispatch","StackActions","completeTransition","key","React","Component","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NativeModules } from 'react-native';\n\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\n\nconst NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;\n\nclass StackView extends React.Component {\n  static defaultProps = {\n    navigationConfig: {\n      mode: 'card'\n    }\n  };\n\n  render() {\n    return <Transitioner render={this._render} configureTransition={this._configureTransition} screenProps={this.props.screenProps} navigation={this.props.navigation} descriptors={this.props.descriptors} onTransitionStart={this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart} onTransitionEnd={(transition, lastTransition) => {\n      const { navigationConfig, navigation } = this.props;\n      const onTransitionEnd = this.props.onTransitionEnd || navigationConfig.onTransitionEnd;\n      if (transition.navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    }} />;\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(StackActions.completeTransition({\n        key: navigation.state.key\n      }));\n    }\n  }\n\n  _configureTransition = (transitionProps, prevTransitionProps) => {\n    return {\n      ...TransitionConfigs.getTransitionConfig(this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, this.props.navigationConfig.mode === 'modal').transitionSpec,\n      useNativeDriver: !!NativeAnimatedModule\n    };\n  };\n\n  _render = (transitionProps, lastTransitionProps) => {\n    const { screenProps, navigationConfig } = this.props;\n    return <StackViewLayout {...navigationConfig} onGestureBegin={this.props.onGestureBegin} onGestureCanceled={this.props.onGestureCanceled} onGestureEnd={this.props.onGestureEnd} screenProps={screenProps} descriptors={this.props.descriptors} transitionProps={transitionProps} lastTransitionProps={lastTransitionProps} />;\n  };\n}\n\nexport default StackView;"]},"metadata":{},"sourceType":"script"}