{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createTabNavigator;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-tabs\\\\dist\\\\utils\\\\createTabNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    (0, _inherits2.default)(NavigationView, _React$Component);\n\n    function NavigationView() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, NavigationView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(NavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _this._renderScene = function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(_reactNavigation.SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          }\n        });\n      };\n\n      _this._renderIcon = function (_ref2) {\n        var route = _ref2.route,\n            _ref2$focused = _ref2.focused,\n            focused = _ref2$focused === void 0 ? true : _ref2$focused,\n            tintColor = _ref2.tintColor,\n            _ref2$horizontal = _ref2.horizontal,\n            horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor,\n            horizontal: horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      _this._getButtonComponent = function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarButtonComponent) {\n          return options.tabBarButtonComponent;\n        }\n\n        return null;\n      };\n\n      _this._getLabelText = function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      _this._getAccessibilityLabel = function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = _this._getLabelText({\n          route: route\n        });\n\n        if (typeof label === 'string') {\n          return label;\n        }\n      };\n\n      _this._getTestID = function (_ref6) {\n        var route = _ref6.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n\n      _this._handleTabPress = function (_ref7) {\n        var route = _ref7.route;\n        _this._isTabPress = true;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = function defaultHandler() {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(_reactNavigation.StackActions.popToTop({\n                key: route.key\n              }));\n            } else {}\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      _this._handleIndexChange = function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      };\n\n      _this._handleSwipeStart = function () {\n        _this.setState({\n          isSwiping: true\n        });\n      };\n\n      _this._handleSwipeEnd = function () {\n        _this.setState({\n          isSwiping: false\n        });\n      };\n\n      _this._jumpTo = function (routeName) {\n        return _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({\n          routeName: routeName\n        }));\n      };\n\n      _this._isTabPress = false;\n      return _this;\n    }\n\n    (0, _createClass2.default)(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            descriptors = _this$props2.descriptors,\n            navigation = _this$props2.navigation,\n            screenProps = _this$props2.screenProps;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n\n        var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);\n\n        return React.createElement(TabView, (0, _extends2.default)({}, options, {\n          getLabelText: this._getLabelText,\n          getButtonComponent: this._getButtonComponent,\n          getAccessibilityLabel: this._getAccessibilityLabel,\n          getTestID: this._getTestID,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleTabPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          }\n        }));\n      }\n    }]);\n    return NavigationView;\n  }(React.Component);\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = (0, _reactNavigation.TabRouter)(routes, config);\n    var navigator = (0, _reactNavigation.createNavigator)(NavigationView, router, config);\n    return (0, _reactNavigation.createNavigationContainer)(navigator);\n  };\n}","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-tabs/dist/utils/createTabNavigator.js"],"names":["createTabNavigator","TabView","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getButtonComponent","tabBarButtonComponent","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","_getTestID","tabBarTestID","_handleTabPress","_isTabPress","defaultHandler","isFocused","hasOwnProperty","index","dispatch","StackActions","popToTop","_jumpTo","tabBarOnPress","_handleIndexChange","state","routes","_handleSwipeStart","setState","isSwiping","_handleSwipeEnd","NavigationActions","navigate","navigationConfig","React","Component","config","router","navigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\n\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    _renderScene = ({ route }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return <SceneView screenProps={screenProps} navigation={descriptor.navigation} component={TabComponent} />;\n    };\n\n    _renderIcon = ({\n      route,\n      focused = true,\n      tintColor,\n      horizontal = false\n    }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ focused, tintColor, horizontal }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getButtonComponent = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        return label;\n      }\n    };\n\n    _getTestID = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _handleTabPress = ({ route }) => {\n      this._isTabPress = true;\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = () => {\n        if (navigation.isFocused()) {\n          if (route.hasOwnProperty('index') && route.index > 0) {\n            // If current tab has a nested navigator, pop to top\n            navigation.dispatch(StackActions.popToTop({ key: route.key }));\n          } else {\n            // TODO: do something to scroll to top\n          }\n        } else {\n          this._jumpTo(route.routeName);\n        }\n      };\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = index => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _handleSwipeStart = () => {\n      this.setState({ isSwiping: true });\n    };\n\n    _handleSwipeEnd = () => {\n      this.setState({ isSwiping: false });\n    };\n\n    _jumpTo = routeName => this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n\n    _isTabPress = false;\n\n    render() {\n      const { descriptors, navigation, screenProps } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...this.props.navigationConfig,\n        ...descriptor.options\n      };\n\n      return <TabView {...options} getLabelText={this._getLabelText} getButtonComponent={this._getButtonComponent} getAccessibilityLabel={this._getAccessibilityLabel} getTestID={this._getTestID} renderIcon={this._renderIcon} renderScene={this._renderScene} onIndexChange={this._handleIndexChange} onTabPress={this._handleTabPress} navigation={navigation} descriptors={descriptors} screenProps={screenProps} />;\n    }\n  }\n\n  return (routes, config = {}) => {\n    const router = TabRouter(routes, config);\n    const navigator = createNavigator(NavigationView, router, config);\n\n    return createNavigationContainer(navigator);\n  };\n}"]},"metadata":{},"sourceType":"script"}