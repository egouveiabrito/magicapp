{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _DrawerRouter = _interopRequireDefault(require(\"../routers/DrawerRouter\"));\n\nvar _DrawerView = _interopRequireDefault(require(\"../views/DrawerView\"));\n\nvar _DrawerNavigatorItems = _interopRequireDefault(require(\"../views/DrawerNavigatorItems\"));\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-drawer\\\\dist\\\\navigators\\\\createDrawerNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar defaultContentComponent = function defaultContentComponent(props) {\n  return _react.default.createElement(_reactNative.ScrollView, {\n    alwaysBounceVertical: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    }\n  }, _react.default.createElement(_reactNavigation.SafeAreaView, {\n    forceInset: {\n      top: 'always',\n      horizontal: 'never'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    }\n  }, _react.default.createElement(_DrawerNavigatorItems.default, (0, _extends2.default)({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    }\n  }))));\n};\n\nvar DefaultDrawerConfig = {\n  drawerWidth: function drawerWidth() {\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n        height = _Dimensions$get.height,\n        width = _Dimensions$get.width;\n\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: 'left',\n  drawerBackgroundColor: 'white',\n  useNativeAnimations: true\n};\n\nvar DrawerNavigator = function DrawerNavigator(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var mergedConfig = _objectSpread({}, DefaultDrawerConfig, {}, config);\n\n  var order = mergedConfig.order,\n      paths = mergedConfig.paths,\n      initialRouteName = mergedConfig.initialRouteName,\n      initialRouteParams = mergedConfig.initialRouteParams,\n      backBehavior = mergedConfig.backBehavior,\n      getCustomActionCreators = mergedConfig.getCustomActionCreators,\n      drawerConfig = (0, _objectWithoutProperties2.default)(mergedConfig, [\"order\", \"paths\", \"initialRouteName\", \"initialRouteParams\", \"backBehavior\", \"getCustomActionCreators\"]);\n  var routerConfig = {\n    order: order,\n    paths: paths,\n    initialRouteName: initialRouteName,\n    initialRouteParams: initialRouteParams,\n    backBehavior: backBehavior,\n    getCustomActionCreators: getCustomActionCreators\n  };\n  var drawerRouter = (0, _DrawerRouter.default)(routeConfigs, routerConfig);\n  var navigator = (0, _reactNavigation.createNavigator)(_DrawerView.default, drawerRouter, drawerConfig);\n  return (0, _reactNavigation.createNavigationContainer)(navigator);\n};\n\nvar _default = DrawerNavigator;\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-drawer/dist/navigators/createDrawerNavigator.js"],"names":["defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","Dimensions","get","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","contentComponent","drawerPosition","drawerBackgroundColor","useNativeAnimations","DrawerNavigator","routeConfigs","config","mergedConfig","order","paths","initialRouteName","initialRouteParams","backBehavior","getCustomActionCreators","drawerConfig","routerConfig","drawerRouter","navigator","DrawerView"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAMA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,KAAK;AAAA,SAAI,6BAAC,uBAAD;AAAY,IAAA,oBAAoB,EAAE,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,KACrC,6BAAC,6BAAD;AAAc,IAAA,UAAU,EAAE;AAAEC,MAAAA,GAAG,EAAE,QAAP;AAAiBC,MAAAA,UAAU,EAAE;AAA7B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,6BAAD,6BAAiBF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADqC,CAAJ;AAAA,CAArC;;AAMA,IAAMG,mBAAmB,GAAG;AAC1BC,EAAAA,WAAW,EAAE,uBAAM;AAAA,0BAMSC,wBAAWC,GAAX,CAAe,QAAf,CANT;AAAA,QAMTC,MANS,mBAMTA,MANS;AAAA,QAMDC,KANC,mBAMDA,KANC;;AAOjB,QAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,KAAjB,CAAxB;AACA,QAAMI,WAAW,GAAGJ,KAAK,GAAGD,MAA5B;AACA,QAAMM,QAAQ,GAAGJ,eAAe,IAAI,GAApC;AACA,QAAMK,YAAY,GAAGC,sBAASC,EAAT,KAAgB,KAAhB,GAAwBJ,WAAW,GAAG,EAAH,GAAQ,EAA3C,GAAgD,EAArE;AACA,QAAMK,QAAQ,GAAGJ,QAAQ,GAAG,GAAH,GAAS,GAAlC;AAEA,WAAOH,IAAI,CAACC,GAAL,CAASF,eAAe,GAAGK,YAA3B,EAAyCG,QAAzC,CAAP;AACD,GAfyB;AAgB1BC,EAAAA,gBAAgB,EAAEnB,uBAhBQ;AAiB1BoB,EAAAA,cAAc,EAAE,MAjBU;AAkB1BC,EAAAA,qBAAqB,EAAE,OAlBG;AAmB1BC,EAAAA,mBAAmB,EAAE;AAnBK,CAA5B;;AAsBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,YAAD,EAA+B;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AACrD,MAAMC,YAAY,qBAAQtB,mBAAR,MAAgCqB,MAAhC,CAAlB;;AADqD,MAInDE,KAJmD,GAWjDD,YAXiD,CAInDC,KAJmD;AAAA,MAKnDC,KALmD,GAWjDF,YAXiD,CAKnDE,KALmD;AAAA,MAMnDC,gBANmD,GAWjDH,YAXiD,CAMnDG,gBANmD;AAAA,MAOnDC,kBAPmD,GAWjDJ,YAXiD,CAOnDI,kBAPmD;AAAA,MAQnDC,YARmD,GAWjDL,YAXiD,CAQnDK,YARmD;AAAA,MASnDC,uBATmD,GAWjDN,YAXiD,CASnDM,uBATmD;AAAA,MAUhDC,YAVgD,0CAWjDP,YAXiD;AAarD,MAAMQ,YAAY,GAAG;AACnBP,IAAAA,KAAK,EAALA,KADmB;AAEnBC,IAAAA,KAAK,EAALA,KAFmB;AAGnBC,IAAAA,gBAAgB,EAAhBA,gBAHmB;AAInBC,IAAAA,kBAAkB,EAAlBA,kBAJmB;AAKnBC,IAAAA,YAAY,EAAZA,YALmB;AAMnBC,IAAAA,uBAAuB,EAAvBA;AANmB,GAArB;AASA,MAAMG,YAAY,GAAG,2BAAaX,YAAb,EAA2BU,YAA3B,CAArB;AAEA,MAAME,SAAS,GAAG,sCAAgBC,mBAAhB,EAA4BF,YAA5B,EAA0CF,YAA1C,CAAlB;AAEA,SAAO,gDAA0BG,SAA1B,CAAP;AACD,CA3BD;;eA6Beb,e","sourcesContent":["import React from 'react';\nimport { Dimensions, Platform, ScrollView } from 'react-native';\nimport { createNavigator, createNavigationContainer, SafeAreaView } from 'react-navigation';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\n\n// A stack navigators props are the intersection between\n// the base navigator props (navgiation, screenProps, etc)\n// and the view's props\n\nconst defaultContentComponent = props => <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>;\n\nconst DefaultDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: 'left',\n  drawerBackgroundColor: 'white',\n  useNativeAnimations: true\n};\n\nconst DrawerNavigator = (routeConfigs, config = {}) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n\n  const {\n    order,\n    paths,\n    initialRouteName,\n    initialRouteParams,\n    backBehavior,\n    getCustomActionCreators,\n    ...drawerConfig\n  } = mergedConfig;\n\n  const routerConfig = {\n    order,\n    paths,\n    initialRouteName,\n    initialRouteParams,\n    backBehavior,\n    getCustomActionCreators\n  };\n\n  const drawerRouter = DrawerRouter(routeConfigs, routerConfig);\n\n  const navigator = createNavigator(DrawerView, drawerRouter, drawerConfig);\n\n  return createNavigationContainer(navigator);\n};\n\nexport default DrawerNavigator;"]},"metadata":{},"sourceType":"script"}