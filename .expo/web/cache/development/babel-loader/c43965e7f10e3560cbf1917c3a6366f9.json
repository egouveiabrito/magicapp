{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _invariant = _interopRequireDefault(require(\"../utils/invariant\"));\n\nvar _getScreenForRouteName = _interopRequireDefault(require(\"./getScreenForRouteName\"));\n\nvar _validateScreenOptions = _interopRequireDefault(require(\"./validateScreenOptions\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread({}, navigationOptions, {}, configurer(_objectSpread({}, configProps, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread({}, navigationOptions, {}, configurer);\n  }\n\n  return navigationOptions;\n}\n\nvar _default = function _default(routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps) {\n    var state = navigation.state;\n    var route = state;\n    (0, _invariant.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = (0, _getScreenForRouteName.default)(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {}\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    (0, _validateScreenOptions.default)(outputConfig, route);\n    return outputConfig;\n  };\n};\n\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;AAEA,SAASA,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,6BACKC,iBADL,MAEKD,UAAU,mBACRE,WADQ;AAEXD,MAAAA,iBAAiB,EAAjBA;AAFW,OAFf;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,6BACKC,iBADL,MAEKD,UAFL;AAID;;AACD,SAAOC,iBAAP;AACD;;eAEc,kBAACE,YAAD,EAAeC,qBAAf;AAAA,SAAyC,UACtDC,UADsD,EAEtDC,WAFsD,EAGnD;AAAA,QACKC,KADL,GACeF,UADf,CACKE,KADL;AAEH,QAAMC,KAAK,GAAGD,KAAd;AAEA,4BACEC,KAAK,CAACC,SAAN,IAAmB,OAAOD,KAAK,CAACC,SAAb,KAA2B,QADhD,EAEE,gEAFF;AAKA,QAAMC,SAAS,GAAG,oCAAsBP,YAAtB,EAAoCK,KAAK,CAACC,SAA1C,CAAlB;AAEA,QAAME,WAAW,GAAGR,YAAY,CAACK,KAAK,CAACC,SAAP,CAAhC;AAEA,QAAMG,iBAAiB,GACrBD,WAAW,KAAKD,SAAhB,GAA4B,IAA5B,GAAmCC,WAAW,CAACV,iBADjD;AAEA,QAAMY,qBAAqB,GAAGH,SAAS,CAACT,iBAAxC;AAEA,QAAMa,aAAa,GAAG;AAAET,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAA1C,KAAtB;AAEA,QAAIS,YAAY,GAAGhB,WAAW,CAACK,qBAAD,EAAwB,EAAxB,EAA4BU,aAA5B,CAA9B;AACAC,IAAAA,YAAY,GAAGhB,WAAW,CACxBc,qBADwB,EAExBE,YAFwB,EAGxBD,aAHwB,CAA1B;AAKAC,IAAAA,YAAY,GAAGhB,WAAW,CAACa,iBAAD,EAAoBG,YAApB,EAAkCD,aAAlC,CAA1B;AAEA,wCAAsBC,YAAtB,EAAoCP,KAApC;AAEA,WAAOO,YAAP;AACD,GAjCc;AAAA,C","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"script"}