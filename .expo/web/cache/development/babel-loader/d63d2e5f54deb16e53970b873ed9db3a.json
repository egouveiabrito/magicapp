{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _clamp = _interopRequireDefault(require(\"../../utils/clamp\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _StackViewCard = _interopRequireDefault(require(\"./StackViewCard\"));\n\nvar _Header = _interopRequireDefault(require(\"../Header/Header\"));\n\nvar _StackViewTransitionConfigs = _interopRequireDefault(require(\"./StackViewTransitionConfigs\"));\n\nvar _ReactNativeFeatures = require(\"../../utils/ReactNativeFeatures\");\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\StackView\\\\StackViewLayout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar emptyFunction = function emptyFunction() {};\n\nvar IPHONE_XS_HEIGHT = 812;\nvar IPHONE_XR_HEIGHT = 896;\n\nvar _Dimensions$get = _reactNative.Dimensions.get('window'),\n    WINDOW_WIDTH = _Dimensions$get.width,\n    WINDOW_HEIGHT = _Dimensions$get.height;\n\nvar IS_IPHONE_X = _reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nvar EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);\n\nvar HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];\nvar HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar RESPOND_THRESHOLD = 20;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nvar animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {\n  if (!animatedValue.__isNative) {\n    return;\n  }\n\n  if (Object.keys(animatedValue._listeners).length === 0) {\n    animatedValue.addListener(emptyFunction);\n  }\n};\n\nvar getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n  if (_reactNative.Platform.OS === 'ios') {\n    if (isLandscape && !_reactNative.Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else {\n    return 56;\n  }\n};\n\nvar StackViewLayout = function (_React$Component) {\n  (0, _inherits2.default)(StackViewLayout, _React$Component);\n\n  function StackViewLayout(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, StackViewLayout);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StackViewLayout).call(this, props));\n    _this._gestureStartValue = 0;\n    _this._isResponding = false;\n    _this._immediateIndex = null;\n    _this._panResponder = _reactNative.PanResponder.create({\n      onPanResponderTerminate: function onPanResponderTerminate() {\n        var navigation = _this.props.transitionProps.navigation;\n        var index = navigation.state.index;\n        _this._isResponding = false;\n\n        _this._reset(index, 0);\n\n        _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n      },\n      onPanResponderGrant: function onPanResponderGrant() {\n        var _this$props$transitio = _this.props.transitionProps,\n            navigation = _this$props$transitio.navigation,\n            position = _this$props$transitio.position,\n            scene = _this$props$transitio.scene;\n        var index = navigation.state.index;\n\n        if (index !== scene.index) {\n          return false;\n        }\n\n        position.stopAnimation(function (value) {\n          _this._isResponding = true;\n          _this._gestureStartValue = value;\n        });\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n      },\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {\n        var _this$props = _this.props,\n            _this$props$transitio2 = _this$props.transitionProps,\n            navigation = _this$props$transitio2.navigation,\n            layout = _this$props$transitio2.layout,\n            scene = _this$props$transitio2.scene,\n            mode = _this$props.mode;\n        var index = navigation.state.index;\n        var isVertical = mode === 'modal';\n        var options = scene.descriptor.options;\n        var gestureDirection = options.gestureDirection;\n        var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n\n        if (index !== scene.index) {\n          return false;\n        }\n\n        var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;\n        var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n        var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n        var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n        var axisHasBeenMeasured = !!axisLength;\n        var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n        var _options$gestureRespo = options.gestureResponseDistance,\n            userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n        var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n        if (screenEdgeDistance > gestureResponseDistance) {\n          return false;\n        }\n\n        var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n        var isOnFirstCard = immediateIndex === 0;\n        var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n        return shouldSetResponder;\n      },\n      onPanResponderMove: function onPanResponderMove(event, gesture) {\n        var _this$props2 = _this.props,\n            _this$props2$transiti = _this$props2.transitionProps,\n            navigation = _this$props2$transiti.navigation,\n            position = _this$props2$transiti.position,\n            layout = _this$props2$transiti.layout,\n            scene = _this$props2$transiti.scene,\n            mode = _this$props2.mode;\n        var index = navigation.state.index;\n        var isVertical = mode === 'modal';\n        var options = scene.descriptor.options;\n        var gestureDirection = options.gestureDirection;\n        var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n        var startValue = _this._gestureStartValue;\n        var axis = isVertical ? 'dy' : 'dx';\n        var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n        var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n        var value = (0, _clamp.default)(index - 1, currentValue, index);\n        position.setValue(value);\n      },\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n        return false;\n      },\n      onPanResponderRelease: function onPanResponderRelease(event, gesture) {\n        var _this$props3 = _this.props,\n            _this$props3$transiti = _this$props3.transitionProps,\n            navigation = _this$props3$transiti.navigation,\n            position = _this$props3$transiti.position,\n            layout = _this$props3$transiti.layout,\n            scene = _this$props3$transiti.scene,\n            mode = _this$props3.mode;\n        var index = navigation.state.index;\n        var isVertical = mode === 'modal';\n        var options = scene.descriptor.options;\n        var gestureDirection = options.gestureDirection;\n        var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n\n        if (!_this._isResponding) {\n          return;\n        }\n\n        _this._isResponding = false;\n        var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;\n        var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n        var movementDirection = gestureDirectionInverted ? -1 : 1;\n        var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n        var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n        var defaultVelocity = axisDistance / ANIMATION_DURATION;\n        var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n        var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n        var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n        position.stopAnimation(function (value) {\n          if (gestureVelocity < -0.5) {\n            _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n\n            _this._reset(immediateIndex, resetDuration);\n\n            return;\n          }\n\n          if (gestureVelocity > 0.5) {\n            _this.props.onGestureFinish && _this.props.onGestureFinish();\n\n            _this._goBack(immediateIndex, goBackDuration);\n\n            return;\n          }\n\n          if (value <= index - POSITION_THRESHOLD) {\n            _this.props.onGestureFinish && _this.props.onGestureFinish();\n\n            _this._goBack(immediateIndex, goBackDuration);\n          } else {\n            _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n\n            _this._reset(immediateIndex, resetDuration);\n          }\n        });\n      }\n    });\n\n    _this._onFloatingHeaderLayout = function (e) {\n      _this.setState({\n        floatingHeaderHeight: e.nativeEvent.layout.height\n      });\n    };\n\n    _this._getTransitionConfig = function () {\n      var isModal = _this.props.mode === 'modal';\n      return _StackViewTransitionConfigs.default.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.lastTransitionProps, isModal);\n    };\n\n    _this._renderCard = function (scene) {\n      var _this$_getTransitionC = _this._getTransitionConfig(),\n          screenInterpolator = _this$_getTransitionC.screenInterpolator;\n\n      var style = screenInterpolator && screenInterpolator(_objectSpread({}, _this.props.transitionProps, {\n        scene: scene\n      }));\n      var options = scene.descriptor.options;\n      var hasHeader = options.header !== null;\n\n      var headerMode = _this._getHeaderMode();\n\n      var paddingTop = 0;\n\n      if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n        paddingTop = _this.state.floatingHeaderHeight;\n      }\n\n      return _react.default.createElement(_StackViewCard.default, (0, _extends2.default)({}, _this.props.transitionProps, {\n        key: \"card_\" + scene.key,\n        transparent: _this.props.transparentCard,\n        style: [style, {\n          paddingTop: paddingTop\n        }, _this.props.cardStyle],\n        scene: scene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        }\n      }), _this._renderInnerScene(scene));\n    };\n\n    _this.state = {\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(StackViewLayout, [{\n    key: \"_renderHeader\",\n    value: function _renderHeader(scene, headerMode) {\n      var options = scene.descriptor.options;\n      var header = options.header;\n\n      if (__DEV__ && typeof header === 'string') {\n        throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n      }\n\n      if (header === null && headerMode === 'screen') {\n        return null;\n      }\n\n      if (_react.default.isValidElement(header)) {\n        return header;\n      }\n\n      var renderHeader = header || function (props) {\n        return _react.default.createElement(_Header.default, (0, _extends2.default)({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          }\n        }));\n      };\n\n      var _this$_getTransitionC2 = this._getTransitionConfig(),\n          headerLeftInterpolator = _this$_getTransitionC2.headerLeftInterpolator,\n          headerTitleInterpolator = _this$_getTransitionC2.headerTitleInterpolator,\n          headerRightInterpolator = _this$_getTransitionC2.headerRightInterpolator,\n          headerBackgroundInterpolator = _this$_getTransitionC2.headerBackgroundInterpolator;\n\n      var _this$props4 = this.props,\n          transitionProps = _this$props4.transitionProps,\n          passProps = (0, _objectWithoutProperties2.default)(_this$props4, [\"transitionProps\"]);\n      return _react.default.createElement(_reactNavigation.NavigationProvider, {\n        value: scene.descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }, renderHeader(_objectSpread({}, passProps, {}, transitionProps, {\n        scene: scene,\n        mode: headerMode,\n        transitionPreset: this._getHeaderTransitionPreset(),\n        layoutPreset: this._getHeaderLayoutPreset(),\n        backTitleVisible: this._getheaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })));\n    }\n  }, {\n    key: \"_animatedSubscribe\",\n    value: function _animatedSubscribe(props) {\n      animatedSubscribeValue(props.transitionProps.layout.width);\n      animatedSubscribeValue(props.transitionProps.layout.height);\n      animatedSubscribeValue(props.transitionProps.position);\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset(resetToIndex, duration) {\n      if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {\n        _reactNative.Animated.spring(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          stiffness: 5000,\n          damping: 600,\n          mass: 3,\n          useNativeDriver: this.props.transitionProps.position.__isNative\n        }).start();\n      } else {\n        _reactNative.Animated.timing(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: this.props.transitionProps.position.__isNative\n        }).start();\n      }\n    }\n  }, {\n    key: \"_goBack\",\n    value: function _goBack(backFromIndex, duration) {\n      var _this2 = this;\n\n      var _this$props$transitio3 = this.props.transitionProps,\n          navigation = _this$props$transitio3.navigation,\n          position = _this$props$transitio3.position,\n          scenes = _this$props$transitio3.scenes;\n      var toValue = Math.max(backFromIndex - 1, 0);\n      this._immediateIndex = toValue;\n\n      var onCompleteAnimation = function onCompleteAnimation() {\n        _this2._immediateIndex = null;\n        var backFromScene = scenes.find(function (s) {\n          return s.index === toValue + 1;\n        });\n\n        if (!_this2._isResponding && backFromScene) {\n          navigation.dispatch(_reactNavigation.NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true\n          }));\n          navigation.dispatch(_reactNavigation.StackActions.completeTransition());\n        }\n      };\n\n      if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {\n        _reactNative.Animated.spring(position, {\n          toValue: toValue,\n          stiffness: 5000,\n          damping: 600,\n          mass: 3,\n          useNativeDriver: position.__isNative\n        }).start(onCompleteAnimation);\n      } else {\n        _reactNative.Animated.timing(position, {\n          toValue: toValue,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: position.__isNative\n        }).start(onCompleteAnimation);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var floatingHeader = null;\n\n      var headerMode = this._getHeaderMode();\n\n      if (headerMode === 'float') {\n        var _scene = this.props.transitionProps.scene;\n        floatingHeader = _react.default.createElement(_reactNative.View, {\n          style: styles.floatingHeader,\n          pointerEvents: \"box-none\",\n          onLayout: this._onFloatingHeaderLayout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384\n          }\n        }, this._renderHeader(_scene, headerMode));\n      }\n\n      var _this$props$transitio4 = this.props.transitionProps,\n          scene = _this$props$transitio4.scene,\n          scenes = _this$props$transitio4.scenes;\n      var options = scene.descriptor.options;\n      var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';\n      var responder = !gesturesEnabled ? null : this._panResponder;\n      var handlers = gesturesEnabled ? responder.panHandlers : {};\n      var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, handlers, {\n        style: containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        }\n      }), _react.default.createElement(_reactNativeScreens.ScreenContainer, {\n        style: styles.scenes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        }\n      }, scenes.map(function (s) {\n        return _this3._renderCard(s);\n      })), floatingHeader);\n    }\n  }, {\n    key: \"_getHeaderMode\",\n    value: function _getHeaderMode() {\n      if (this.props.headerMode) {\n        return this.props.headerMode;\n      }\n\n      if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {\n        return 'screen';\n      }\n\n      return 'float';\n    }\n  }, {\n    key: \"_getHeaderLayoutPreset\",\n    value: function _getHeaderLayoutPreset() {\n      var headerLayoutPreset = this.props.headerLayoutPreset;\n\n      if (headerLayoutPreset) {\n        if (__DEV__) {\n          if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && _reactNative.Platform.OS === 'ios') {\n            console.warn(\"headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'\");\n          }\n        }\n\n        if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {\n          return headerLayoutPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET_VALUES.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n        }\n      }\n\n      if (_reactNative.Platform.OS === 'android') {\n        return 'left';\n      } else {\n        return 'center';\n      }\n    }\n  }, {\n    key: \"_getHeaderTransitionPreset\",\n    value: function _getHeaderTransitionPreset() {\n      if (_reactNative.Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n        return 'fade-in-place';\n      }\n\n      var headerTransitionPreset = this.props.headerTransitionPreset;\n\n      if (headerTransitionPreset) {\n        if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {\n          return headerTransitionPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET_VALUES.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n        }\n      }\n\n      return 'fade-in-place';\n    }\n  }, {\n    key: \"_getheaderBackTitleVisible\",\n    value: function _getheaderBackTitleVisible() {\n      var headerBackTitleVisible = this.props.headerBackTitleVisible;\n      return headerBackTitleVisible;\n    }\n  }, {\n    key: \"_renderInnerScene\",\n    value: function _renderInnerScene(scene) {\n      var _scene$descriptor = scene.descriptor,\n          navigation = _scene$descriptor.navigation,\n          getComponent = _scene$descriptor.getComponent;\n      var SceneComponent = getComponent();\n      var screenProps = this.props.screenProps;\n\n      var headerMode = this._getHeaderMode();\n\n      if (headerMode === 'screen') {\n        return _react.default.createElement(_reactNative.View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477\n          }\n        }, _react.default.createElement(_reactNavigation.SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478\n          }\n        })), this._renderHeader(scene, headerMode));\n      }\n\n      return _react.default.createElement(_reactNavigation.SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        }\n      });\n    }\n  }]);\n  return StackViewLayout;\n}(_react.default.Component);\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\n\nvar _default = (0, _reactNavigation.withOrientation)(StackViewLayout);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-stack/dist/views/StackView/StackViewLayout.js"],"names":["emptyFunction","IPHONE_XS_HEIGHT","IPHONE_XR_HEIGHT","Dimensions","get","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","IS_IPHONE_X","Platform","OS","isPad","isTVOS","EaseInOut","Easing","inOut","ease","HEADER_LAYOUT_PRESET_VALUES","HEADER_TRANSITION_PRESET_VALUES","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","animatedSubscribeValue","animatedValue","__isNative","Object","keys","_listeners","length","addListener","getDefaultHeaderHeight","isLandscape","StackViewLayout","props","_gestureStartValue","_isResponding","_immediateIndex","_panResponder","PanResponder","create","onPanResponderTerminate","navigation","transitionProps","index","state","_reset","onGestureCanceled","onPanResponderGrant","position","scene","stopAnimation","value","onGestureBegin","onMoveShouldSetPanResponder","event","gesture","layout","mode","isVertical","options","descriptor","gestureDirection","gestureDirectionInverted","I18nManager","isRTL","immediateIndex","currentDragDistance","currentDragPosition","nativeEvent","axisLength","__getValue","axisHasBeenMeasured","screenEdgeDistance","gestureResponseDistance","userGestureResponseDistance","vertical","horizontal","hasDraggedEnough","Math","abs","isOnFirstCard","shouldSetResponder","onPanResponderMove","startValue","axis","axisDistance","currentValue","setValue","onPanResponderTerminationRequest","onPanResponderRelease","movementDirection","movedDistance","gestureVelocity","defaultVelocity","velocity","max","resetDuration","goBackDuration","onGestureFinish","_goBack","_onFloatingHeaderLayout","e","setState","floatingHeaderHeight","_getTransitionConfig","isModal","TransitionConfigs","getTransitionConfig","transitionConfig","lastTransitionProps","_renderCard","screenInterpolator","style","hasHeader","header","headerMode","_getHeaderMode","paddingTop","headerTransparent","key","transparentCard","cardStyle","_renderInnerScene","__DEV__","Error","React","isValidElement","renderHeader","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","headerBackgroundInterpolator","passProps","transitionPreset","_getHeaderTransitionPreset","layoutPreset","_getHeaderLayoutPreset","backTitleVisible","_getheaderBackTitleVisible","leftInterpolator","titleInterpolator","rightInterpolator","backgroundInterpolator","resetToIndex","duration","Animated","spring","toValue","stiffness","damping","mass","useNativeDriver","start","timing","easing","backFromIndex","scenes","onCompleteAnimation","backFromScene","find","s","dispatch","NavigationActions","back","route","immediate","StackActions","completeTransition","floatingHeader","styles","_renderHeader","gesturesEnabled","responder","handlers","panHandlers","containerStyle","container","map","headerLayoutPreset","console","warn","includes","error","join","JSON","stringify","headerTransitionPreset","headerBackTitleVisible","getComponent","SceneComponent","screenProps","Component","StyleSheet","flex","flexDirection","overflow","left","top","right"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM,CAAE,CAA9B;;AAEA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;;sBACuDC,wBAAWC,GAAX,CAAe,QAAf,C;IAAxCC,Y,mBAAPC,K;IAA6BC,a,mBAARC,M;;AAC7B,IAAMC,WAAW,GAAGC,sBAASC,EAAT,KAAgB,KAAhB,IAAyB,CAACD,sBAASE,KAAnC,IAA4C,CAACF,sBAASG,MAAtD,KAAiEN,aAAa,KAAKN,gBAAlB,IAAsCI,YAAY,KAAKJ,gBAAvD,IAA2EM,aAAa,KAAKL,gBAA7F,IAAiHG,YAAY,KAAKH,gBAAnM,CAApB;;AAEA,IAAMY,SAAS,GAAGC,oBAAOC,KAAP,CAAaD,oBAAOE,IAApB,CAAlB;;AAKA,IAAMC,2BAA2B,GAAG,CAAC,QAAD,EAAW,MAAX,CAApC;AACA,IAAMC,+BAA+B,GAAG,CAAC,OAAD,EAAU,eAAV,CAAxC;AAOA,IAAMC,kBAAkB,GAAG,GAA3B;AAOA,IAAMC,kBAAkB,GAAG,IAAI,CAA/B;AAKA,IAAMC,iBAAiB,GAAG,EAA1B;AAKA,IAAMC,oCAAoC,GAAG,EAA7C;AACA,IAAMC,kCAAkC,GAAG,GAA3C;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,aAAa,EAAI;AAC9C,MAAI,CAACA,aAAa,CAACC,UAAnB,EAA+B;AAC7B;AACD;;AACD,MAAIC,MAAM,CAACC,IAAP,CAAYH,aAAa,CAACI,UAA1B,EAAsCC,MAAtC,KAAiD,CAArD,EAAwD;AACtDL,IAAAA,aAAa,CAACM,WAAd,CAA0BhC,aAA1B;AACD;AACF,CAPD;;AASA,IAAMiC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,WAAW,EAAI;AAC5C,MAAIxB,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,QAAIuB,WAAW,IAAI,CAACxB,sBAASE,KAA7B,EAAoC;AAClC,aAAO,EAAP;AACD,KAFD,MAEO,IAAIH,WAAJ,EAAiB;AACtB,aAAO,EAAP;AACD,KAFM,MAEA;AACL,aAAO,EAAP;AACD;AACF,GARD,MAQO;AACL,WAAO,EAAP;AACD;AACF,CAZD;;IAcM0B,e;;;AAqBJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,qHAAMA,KAAN;AADiB,UAdnBC,kBAcmB,GAdE,CAcF;AAAA,UAXnBC,aAWmB,GAXH,KAWG;AAAA,UAFnBC,eAEmB,GAFD,IAEC;AAAA,UAiInBC,aAjImB,GAiIHC,0BAAaC,MAAb,CAAoB;AAClCC,MAAAA,uBAAuB,EAAE,mCAAM;AAAA,YACrBC,UADqB,GACN,MAAKR,KAAL,CAAWS,eADL,CACrBD,UADqB;AAAA,YAErBE,KAFqB,GAEXF,UAAU,CAACG,KAFA,CAErBD,KAFqB;AAG7B,cAAKR,aAAL,GAAqB,KAArB;;AACA,cAAKU,MAAL,CAAYF,KAAZ,EAAmB,CAAnB;;AACA,cAAKV,KAAL,CAAWa,iBAAX,IAAgC,MAAKb,KAAL,CAAWa,iBAAX,EAAhC;AACD,OAPiC;AAQlCC,MAAAA,mBAAmB,EAAE,+BAAM;AAAA,oCAGrB,MAAKd,KAHgB,CAEvBS,eAFuB;AAAA,YAEJD,UAFI,yBAEJA,UAFI;AAAA,YAEQO,QAFR,yBAEQA,QAFR;AAAA,YAEkBC,KAFlB,yBAEkBA,KAFlB;AAAA,YAIjBN,KAJiB,GAIPF,UAAU,CAACG,KAJJ,CAIjBD,KAJiB;;AAMzB,YAAIA,KAAK,KAAKM,KAAK,CAACN,KAApB,EAA2B;AACzB,iBAAO,KAAP;AACD;;AAEDK,QAAAA,QAAQ,CAACE,aAAT,CAAuB,UAAAC,KAAK,EAAI;AAC9B,gBAAKhB,aAAL,GAAqB,IAArB;AACA,gBAAKD,kBAAL,GAA0BiB,KAA1B;AACD,SAHD;AAIA,cAAKlB,KAAL,CAAWmB,cAAX,IAA6B,MAAKnB,KAAL,CAAWmB,cAAX,EAA7B;AACD,OAvBiC;AAwBlCC,MAAAA,2BAA2B,EAAE,qCAACC,KAAD,EAAQC,OAAR,EAAoB;AAAA,0BAI3C,MAAKtB,KAJsC;AAAA,iDAE7CS,eAF6C;AAAA,YAE1BD,UAF0B,0BAE1BA,UAF0B;AAAA,YAEde,MAFc,0BAEdA,MAFc;AAAA,YAENP,KAFM,0BAENA,KAFM;AAAA,YAG7CQ,IAH6C,eAG7CA,IAH6C;AAAA,YAKvCd,KALuC,GAK7BF,UAAU,CAACG,KALkB,CAKvCD,KALuC;AAM/C,YAAMe,UAAU,GAAGD,IAAI,KAAK,OAA5B;AAN+C,YAOvCE,OAPuC,GAO3BV,KAAK,CAACW,UAPqB,CAOvCD,OAPuC;AAQ/C,YAAME,gBAAgB,GAAGF,OAAO,CAACE,gBAAjC;AAEA,YAAMC,wBAAwB,GAAG,OAAOD,gBAAP,KAA4B,QAA5B,GAAuCA,gBAAgB,KAAK,UAA5D,GAAyEE,yBAAYC,KAAtH;;AAEA,YAAIrB,KAAK,KAAKM,KAAK,CAACN,KAApB,EAA2B;AACzB,iBAAO,KAAP;AACD;;AAED,YAAMsB,cAAc,GAAG,MAAK7B,eAAL,IAAwB,IAAxB,GAA+BO,KAA/B,GAAuC,MAAKP,eAAnE;AACA,YAAM8B,mBAAmB,GAAGX,OAAO,CAACG,UAAU,GAAG,IAAH,GAAU,IAArB,CAAnC;AACA,YAAMS,mBAAmB,GAAGb,KAAK,CAACc,WAAN,CAAkBV,UAAU,GAAG,OAAH,GAAa,OAAzC,CAA5B;AACA,YAAMW,UAAU,GAAGX,UAAU,GAAGF,MAAM,CAACnD,MAAP,CAAciE,UAAd,EAAH,GAAgCd,MAAM,CAACrD,KAAP,CAAamE,UAAb,EAA7D;AACA,YAAMC,mBAAmB,GAAG,CAAC,CAACF,UAA9B;AAGA,YAAMG,kBAAkB,GAAGV,wBAAwB,GAAGO,UAAU,IAAIF,mBAAmB,GAAGD,mBAA1B,CAAb,GAA8DC,mBAAmB,GAAGD,mBAAvI;AAvB+C,oCA4B3CP,OA5B2C,CA2B7Cc,uBA3B6C;AAAA,YA2BpBC,2BA3BoB,sCA2BU,EA3BV;AA6B/C,YAAMD,uBAAuB,GAAGf,UAAU,GAAGgB,2BAA2B,CAACC,QAA5B,IAAwCtD,kCAA3C,GAAgFqD,2BAA2B,CAACE,UAA5B,IAA0CxD,oCAApK;;AAEA,YAAIoD,kBAAkB,GAAGC,uBAAzB,EAAkD;AAEhD,iBAAO,KAAP;AACD;;AAED,YAAMI,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAASb,mBAAT,IAAgC/C,iBAAzD;AAEA,YAAM6D,aAAa,GAAGf,cAAc,KAAK,CAAzC;AACA,YAAMgB,kBAAkB,GAAGJ,gBAAgB,IAAIN,mBAApB,IAA2C,CAACS,aAAvE;AACA,eAAOC,kBAAP;AACD,OAjEiC;AAkElCC,MAAAA,kBAAkB,EAAE,4BAAC5B,KAAD,EAAQC,OAAR,EAAoB;AAAA,2BAIlC,MAAKtB,KAJ6B;AAAA,iDAEpCS,eAFoC;AAAA,YAEjBD,UAFiB,yBAEjBA,UAFiB;AAAA,YAELO,QAFK,yBAELA,QAFK;AAAA,YAEKQ,MAFL,yBAEKA,MAFL;AAAA,YAEaP,KAFb,yBAEaA,KAFb;AAAA,YAGpCQ,IAHoC,gBAGpCA,IAHoC;AAAA,YAK9Bd,KAL8B,GAKpBF,UAAU,CAACG,KALS,CAK9BD,KAL8B;AAMtC,YAAMe,UAAU,GAAGD,IAAI,KAAK,OAA5B;AANsC,YAO9BE,OAP8B,GAOlBV,KAAK,CAACW,UAPY,CAO9BD,OAP8B;AAQtC,YAAME,gBAAgB,GAAGF,OAAO,CAACE,gBAAjC;AAEA,YAAMC,wBAAwB,GAAG,OAAOD,gBAAP,KAA4B,QAA5B,GAAuCA,gBAAgB,KAAK,UAA5D,GAAyEE,yBAAYC,KAAtH;AAGA,YAAMmB,UAAU,GAAG,MAAKjD,kBAAxB;AACA,YAAMkD,IAAI,GAAG1B,UAAU,GAAG,IAAH,GAAU,IAAjC;AACA,YAAM2B,YAAY,GAAG3B,UAAU,GAAGF,MAAM,CAACnD,MAAP,CAAciE,UAAd,EAAH,GAAgCd,MAAM,CAACrD,KAAP,CAAamE,UAAb,EAA/D;AACA,YAAMgB,YAAY,GAAGF,IAAI,KAAK,IAAT,IAAiBtB,wBAAjB,GAA4CqB,UAAU,GAAG5B,OAAO,CAAC6B,IAAD,CAAP,GAAgBC,YAAzE,GAAwFF,UAAU,GAAG5B,OAAO,CAAC6B,IAAD,CAAP,GAAgBC,YAA1I;AACA,YAAMlC,KAAK,GAAG,oBAAMR,KAAK,GAAG,CAAd,EAAiB2C,YAAjB,EAA+B3C,KAA/B,CAAd;AACAK,QAAAA,QAAQ,CAACuC,QAAT,CAAkBpC,KAAlB;AACD,OArFiC;AAsFlCqC,MAAAA,gCAAgC,EAAE;AAAA,eAGlC,KAHkC;AAAA,OAtFA;AA0FlCC,MAAAA,qBAAqB,EAAE,+BAACnC,KAAD,EAAQC,OAAR,EAAoB;AAAA,2BAIrC,MAAKtB,KAJgC;AAAA,iDAEvCS,eAFuC;AAAA,YAEpBD,UAFoB,yBAEpBA,UAFoB;AAAA,YAERO,QAFQ,yBAERA,QAFQ;AAAA,YAEEQ,MAFF,yBAEEA,MAFF;AAAA,YAEUP,KAFV,yBAEUA,KAFV;AAAA,YAGvCQ,IAHuC,gBAGvCA,IAHuC;AAAA,YAKjCd,KALiC,GAKvBF,UAAU,CAACG,KALY,CAKjCD,KALiC;AAMzC,YAAMe,UAAU,GAAGD,IAAI,KAAK,OAA5B;AANyC,YAOjCE,OAPiC,GAOrBV,KAAK,CAACW,UAPe,CAOjCD,OAPiC;AAQzC,YAAME,gBAAgB,GAAGF,OAAO,CAACE,gBAAjC;AAEA,YAAMC,wBAAwB,GAAG,OAAOD,gBAAP,KAA4B,QAA5B,GAAuCA,gBAAgB,KAAK,UAA5D,GAAyEE,yBAAYC,KAAtH;;AAEA,YAAI,CAAC,MAAK7B,aAAV,EAAyB;AACvB;AACD;;AACD,cAAKA,aAAL,GAAqB,KAArB;AAEA,YAAM8B,cAAc,GAAG,MAAK7B,eAAL,IAAwB,IAAxB,GAA+BO,KAA/B,GAAuC,MAAKP,eAAnE;AAGA,YAAMiD,YAAY,GAAG3B,UAAU,GAAGF,MAAM,CAACnD,MAAP,CAAciE,UAAd,EAAH,GAAgCd,MAAM,CAACrD,KAAP,CAAamE,UAAb,EAA/D;AACA,YAAMoB,iBAAiB,GAAG5B,wBAAwB,GAAG,CAAC,CAAJ,GAAQ,CAA1D;AACA,YAAM6B,aAAa,GAAGD,iBAAiB,GAAGnC,OAAO,CAACG,UAAU,GAAG,IAAH,GAAU,IAArB,CAAjD;AACA,YAAMkC,eAAe,GAAGF,iBAAiB,GAAGnC,OAAO,CAACG,UAAU,GAAG,IAAH,GAAU,IAArB,CAAnD;AACA,YAAMmC,eAAe,GAAGR,YAAY,GAAGpE,kBAAvC;AACA,YAAM6E,QAAQ,GAAGhB,IAAI,CAACiB,GAAL,CAASjB,IAAI,CAACC,GAAL,CAASa,eAAT,CAAT,EAAoCC,eAApC,CAAjB;AACA,YAAMG,aAAa,GAAGlC,wBAAwB,GAAG,CAACuB,YAAY,GAAGM,aAAhB,IAAiCG,QAApC,GAA+CH,aAAa,GAAGG,QAA7G;AACA,YAAMG,cAAc,GAAGnC,wBAAwB,GAAG6B,aAAa,GAAGG,QAAnB,GAA8B,CAACT,YAAY,GAAGM,aAAhB,IAAiCG,QAA9G;AAGA9C,QAAAA,QAAQ,CAACE,aAAT,CAAuB,UAAAC,KAAK,EAAI;AAG9B,cAAIyC,eAAe,GAAG,CAAC,GAAvB,EAA4B;AAC1B,kBAAK3D,KAAL,CAAWa,iBAAX,IAAgC,MAAKb,KAAL,CAAWa,iBAAX,EAAhC;;AACA,kBAAKD,MAAL,CAAYoB,cAAZ,EAA4B+B,aAA5B;;AACA;AACD;;AACD,cAAIJ,eAAe,GAAG,GAAtB,EAA2B;AACzB,kBAAK3D,KAAL,CAAWiE,eAAX,IAA8B,MAAKjE,KAAL,CAAWiE,eAAX,EAA9B;;AACA,kBAAKC,OAAL,CAAalC,cAAb,EAA6BgC,cAA7B;;AACA;AACD;;AAID,cAAI9C,KAAK,IAAIR,KAAK,GAAGzB,kBAArB,EAAyC;AACvC,kBAAKe,KAAL,CAAWiE,eAAX,IAA8B,MAAKjE,KAAL,CAAWiE,eAAX,EAA9B;;AACA,kBAAKC,OAAL,CAAalC,cAAb,EAA6BgC,cAA7B;AACD,WAHD,MAGO;AACL,kBAAKhE,KAAL,CAAWa,iBAAX,IAAgC,MAAKb,KAAL,CAAWa,iBAAX,EAAhC;;AACA,kBAAKD,MAAL,CAAYoB,cAAZ,EAA4B+B,aAA5B;AACD;AACF,SAvBD;AAwBD;AAhJiC,KAApB,CAjIG;;AAAA,UAoRnBI,uBApRmB,GAoRO,UAAAC,CAAC,EAAI;AAC7B,YAAKC,QAAL,CAAc;AAAEC,QAAAA,oBAAoB,EAAEF,CAAC,CAACjC,WAAF,CAAcZ,MAAd,CAAqBnD;AAA7C,OAAd;AACD,KAtRkB;;AAAA,UAoYnBmG,oBApYmB,GAoYI,YAAM;AAC3B,UAAMC,OAAO,GAAG,MAAKxE,KAAL,CAAWwB,IAAX,KAAoB,OAApC;AAEA,aAAOiD,oCAAkBC,mBAAlB,CAAsC,MAAK1E,KAAL,CAAW2E,gBAAjD,EAAmE,MAAK3E,KAAL,CAAWS,eAA9E,EAA+F,MAAKT,KAAL,CAAW4E,mBAA1G,EAA+HJ,OAA/H,CAAP;AACD,KAxYkB;;AAAA,UA0YnBK,WA1YmB,GA0YL,UAAA7D,KAAK,EAAI;AAAA,kCACU,MAAKuD,oBAAL,EADV;AAAA,UACbO,kBADa,yBACbA,kBADa;;AAGrB,UAAMC,KAAK,GAAGD,kBAAkB,IAAIA,kBAAkB,mBAAM,MAAK9E,KAAL,CAAWS,eAAjB;AAAkCO,QAAAA,KAAK,EAALA;AAAlC,SAAtD;AAHqB,UAObU,OAPa,GAODV,KAAK,CAACW,UAPL,CAObD,OAPa;AAQrB,UAAMsD,SAAS,GAAGtD,OAAO,CAACuD,MAAR,KAAmB,IAArC;;AACA,UAAMC,UAAU,GAAG,MAAKC,cAAL,EAAnB;;AACA,UAAIC,UAAU,GAAG,CAAjB;;AACA,UAAIJ,SAAS,IAAIE,UAAU,KAAK,OAA5B,IAAuC,CAACxD,OAAO,CAAC2D,iBAApD,EAAuE;AACrED,QAAAA,UAAU,GAAG,MAAKzE,KAAL,CAAW2D,oBAAxB;AACD;;AAED,aAAO,6BAAC,sBAAD,6BAAU,MAAKtE,KAAL,CAAWS,eAArB;AAAsC,QAAA,GAAG,YAAUO,KAAK,CAACsE,GAAzD;AAAgE,QAAA,WAAW,EAAE,MAAKtF,KAAL,CAAWuF,eAAxF;AAAyG,QAAA,KAAK,EAAE,CAACR,KAAD,EAAQ;AAAEK,UAAAA,UAAU,EAAVA;AAAF,SAAR,EAAwB,MAAKpF,KAAL,CAAWwF,SAAnC,CAAhH;AAA+J,QAAA,KAAK,EAAExE,KAAtK;AAAA;AAAA;AAAA;AAAA;AAAA,UACF,MAAKyE,iBAAL,CAAuBzE,KAAvB,CADE,CAAP;AAGD,KA5ZkB;;AAGjB,UAAKL,KAAL,GAAa;AAMX2D,MAAAA,oBAAoB,EAAEzE,sBAAsB,CAACG,KAAK,CAACF,WAAP;AANjC,KAAb;AAHiB;AAWlB;;;;kCAEakB,K,EAAOkE,U,EAAY;AAAA,UACvBxD,OADuB,GACXV,KAAK,CAACW,UADK,CACvBD,OADuB;AAAA,UAEvBuD,MAFuB,GAEZvD,OAFY,CAEvBuD,MAFuB;;AAI/B,UAAIS,OAAO,IAAI,OAAOT,MAAP,KAAkB,QAAjC,EAA2C;AACzC,cAAM,IAAIU,KAAJ,8BAAoCV,MAApC,kFAAN;AACD;;AAED,UAAIA,MAAM,KAAK,IAAX,IAAmBC,UAAU,KAAK,QAAtC,EAAgD;AAC9C,eAAO,IAAP;AACD;;AAGD,UAAIU,eAAMC,cAAN,CAAqBZ,MAArB,CAAJ,EAAkC;AAChC,eAAOA,MAAP;AACD;;AAGD,UAAMa,YAAY,GAAGb,MAAM,IAAK,UAAAjF,KAAK;AAAA,eAAI,6BAAC,eAAD,6BAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,WAAJ;AAAA,OAArC;;AAlB+B,mCAyB3B,KAAKuE,oBAAL,EAzB2B;AAAA,UAqB7BwB,sBArB6B,0BAqB7BA,sBArB6B;AAAA,UAsB7BC,uBAtB6B,0BAsB7BA,uBAtB6B;AAAA,UAuB7BC,uBAvB6B,0BAuB7BA,uBAvB6B;AAAA,UAwB7BC,4BAxB6B,0BAwB7BA,4BAxB6B;;AAAA,yBA2BW,KAAKlG,KA3BhB;AAAA,UA2BvBS,eA3BuB,gBA2BvBA,eA3BuB;AAAA,UA2BH0F,SA3BG;AA6B/B,aAAO,6BAAC,mCAAD;AAAoB,QAAA,KAAK,EAAEnF,KAAK,CAACW,UAAN,CAAiBnB,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,SACFsF,YAAY,mBACVK,SADU,MAEV1F,eAFU;AAGbO,QAAAA,KAAK,EAALA,KAHa;AAIbQ,QAAAA,IAAI,EAAE0D,UAJO;AAKbkB,QAAAA,gBAAgB,EAAE,KAAKC,0BAAL,EALL;AAMbC,QAAAA,YAAY,EAAE,KAAKC,sBAAL,EAND;AAObC,QAAAA,gBAAgB,EAAE,KAAKC,0BAAL,EAPL;AAQbC,QAAAA,gBAAgB,EAAEX,sBARL;AASbY,QAAAA,iBAAiB,EAAEX,uBATN;AAUbY,QAAAA,iBAAiB,EAAEX,uBAVN;AAWbY,QAAAA,sBAAsB,EAAEX;AAXX,SADV,CAAP;AAeD;;;uCAEkBlG,K,EAAO;AAQxBX,MAAAA,sBAAsB,CAACW,KAAK,CAACS,eAAN,CAAsBc,MAAtB,CAA6BrD,KAA9B,CAAtB;AACAmB,MAAAA,sBAAsB,CAACW,KAAK,CAACS,eAAN,CAAsBc,MAAtB,CAA6BnD,MAA9B,CAAtB;AACAiB,MAAAA,sBAAsB,CAACW,KAAK,CAACS,eAAN,CAAsBM,QAAvB,CAAtB;AACD;;;2BAEM+F,Y,EAAcC,Q,EAAU;AAC7B,UAAIzI,sBAASC,EAAT,KAAgB,KAAhB,IAAyB,2DAA7B,EAAgE;AAC9DyI,8BAASC,MAAT,CAAgB,KAAKjH,KAAL,CAAWS,eAAX,CAA2BM,QAA3C,EAAqD;AACnDmG,UAAAA,OAAO,EAAEJ,YAD0C;AAEnDK,UAAAA,SAAS,EAAE,IAFwC;AAGnDC,UAAAA,OAAO,EAAE,GAH0C;AAInDC,UAAAA,IAAI,EAAE,CAJ6C;AAKnDC,UAAAA,eAAe,EAAE,KAAKtH,KAAL,CAAWS,eAAX,CAA2BM,QAA3B,CAAoCxB;AALF,SAArD,EAMGgI,KANH;AAOD,OARD,MAQO;AACLP,8BAASQ,MAAT,CAAgB,KAAKxH,KAAL,CAAWS,eAAX,CAA2BM,QAA3C,EAAqD;AACnDmG,UAAAA,OAAO,EAAEJ,YAD0C;AAEnDC,UAAAA,QAAQ,EAARA,QAFmD;AAGnDU,UAAAA,MAAM,EAAE/I,SAH2C;AAInD4I,UAAAA,eAAe,EAAE,KAAKtH,KAAL,CAAWS,eAAX,CAA2BM,QAA3B,CAAoCxB;AAJF,SAArD,EAKGgI,KALH;AAMD;AACF;;;4BAEOG,a,EAAeX,Q,EAAU;AAAA;;AAAA,mCACU,KAAK/G,KAAL,CAAWS,eADrB;AAAA,UACvBD,UADuB,0BACvBA,UADuB;AAAA,UACXO,QADW,0BACXA,QADW;AAAA,UACD4G,MADC,0BACDA,MADC;AAE/B,UAAMT,OAAO,GAAGrE,IAAI,CAACiB,GAAL,CAAS4D,aAAa,GAAG,CAAzB,EAA4B,CAA5B,CAAhB;AAIA,WAAKvH,eAAL,GAAuB+G,OAAvB;;AAEA,UAAMU,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAA,MAAI,CAACzH,eAAL,GAAuB,IAAvB;AACA,YAAM0H,aAAa,GAAGF,MAAM,CAACG,IAAP,CAAY,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACrH,KAAF,KAAYwG,OAAO,GAAG,CAA1B;AAAA,SAAb,CAAtB;;AACA,YAAI,CAAC,MAAI,CAAChH,aAAN,IAAuB2H,aAA3B,EAA0C;AACxCrH,UAAAA,UAAU,CAACwH,QAAX,CAAoBC,mCAAkBC,IAAlB,CAAuB;AACzC5C,YAAAA,GAAG,EAAEuC,aAAa,CAACM,KAAd,CAAoB7C,GADgB;AAEzC8C,YAAAA,SAAS,EAAE;AAF8B,WAAvB,CAApB;AAIA5H,UAAAA,UAAU,CAACwH,QAAX,CAAoBK,8BAAaC,kBAAb,EAApB;AACD;AACF,OAVD;;AAYA,UAAIhK,sBAASC,EAAT,KAAgB,KAAhB,IAAyB,2DAA7B,EAAgE;AAC9DyI,8BAASC,MAAT,CAAgBlG,QAAhB,EAA0B;AACxBmG,UAAAA,OAAO,EAAPA,OADwB;AAExBC,UAAAA,SAAS,EAAE,IAFa;AAGxBC,UAAAA,OAAO,EAAE,GAHe;AAIxBC,UAAAA,IAAI,EAAE,CAJkB;AAKxBC,UAAAA,eAAe,EAAEvG,QAAQ,CAACxB;AALF,SAA1B,EAMGgI,KANH,CAMSK,mBANT;AAOD,OARD,MAQO;AACLZ,8BAASQ,MAAT,CAAgBzG,QAAhB,EAA0B;AACxBmG,UAAAA,OAAO,EAAPA,OADwB;AAExBH,UAAAA,QAAQ,EAARA,QAFwB;AAGxBU,UAAAA,MAAM,EAAE/I,SAHgB;AAIxB4I,UAAAA,eAAe,EAAEvG,QAAQ,CAACxB;AAJF,SAA1B,EAKGgI,KALH,CAKSK,mBALT;AAMD;AACF;;;6BAyJQ;AAAA;;AACP,UAAIW,cAAc,GAAG,IAArB;;AACA,UAAMrD,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AAEA,UAAID,UAAU,KAAK,OAAnB,EAA4B;AAAA,YAClBlE,MADkB,GACR,KAAKhB,KAAL,CAAWS,eADH,CAClBO,KADkB;AAE1BuH,QAAAA,cAAc,GAAG,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEC,MAAM,CAACD,cAApB;AAAoC,UAAA,aAAa,EAAC,UAAlD;AAA6D,UAAA,QAAQ,EAAE,KAAKpE,uBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA,WACZ,KAAKsE,aAAL,CAAmBzH,MAAnB,EAA0BkE,UAA1B,CADY,CAAjB;AAGD;;AATM,mCAYH,KAAKlF,KAZF,CAWLS,eAXK;AAAA,UAWcO,KAXd,0BAWcA,KAXd;AAAA,UAWqB2G,MAXrB,0BAWqBA,MAXrB;AAAA,UAaCjG,OAbD,GAaaV,KAAK,CAACW,UAbnB,CAaCD,OAbD;AAeP,UAAMgH,eAAe,GAAG,OAAOhH,OAAO,CAACgH,eAAf,KAAmC,SAAnC,GAA+ChH,OAAO,CAACgH,eAAvD,GAAyEpK,sBAASC,EAAT,KAAgB,KAAjH;AAEA,UAAMoK,SAAS,GAAG,CAACD,eAAD,GAAmB,IAAnB,GAA0B,KAAKtI,aAAjD;AAEA,UAAMwI,QAAQ,GAAGF,eAAe,GAAGC,SAAS,CAACE,WAAb,GAA2B,EAA3D;AACA,UAAMC,cAAc,GAAG,CAACN,MAAM,CAACO,SAAR,EAAmB,KAAKxE,oBAAL,GAA4BuE,cAA/C,CAAvB;AAEA,aAAO,6BAAC,iBAAD,6BAAUF,QAAV;AAAoB,QAAA,KAAK,EAAEE,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,UACH,6BAAC,mCAAD;AAAiB,QAAA,KAAK,EAAEN,MAAM,CAACb,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,MAAM,CAACqB,GAAP,CAAW,UAAAjB,CAAC;AAAA,eAAI,MAAI,CAAClD,WAAL,CAAiBkD,CAAjB,CAAJ;AAAA,OAAZ,CADH,CADG,EAIFQ,cAJE,CAAP;AAMD;;;qCAEgB;AACf,UAAI,KAAKvI,KAAL,CAAWkF,UAAf,EAA2B;AACzB,eAAO,KAAKlF,KAAL,CAAWkF,UAAlB;AACD;;AACD,UAAI5G,sBAASC,EAAT,KAAgB,SAAhB,IAA6B,KAAKyB,KAAL,CAAWwB,IAAX,KAAoB,OAArD,EAA8D;AAC5D,eAAO,QAAP;AACD;;AACD,aAAO,OAAP;AACD;;;6CAEwB;AAAA,UACfyH,kBADe,GACQ,KAAKjJ,KADb,CACfiJ,kBADe;;AAEvB,UAAIA,kBAAJ,EAAwB;AACtB,YAAIvD,OAAJ,EAAa;AACX,cAAI,KAAKW,0BAAL,OAAsC,OAAtC,IAAiD4C,kBAAkB,KAAK,MAAxE,IAAkF3K,sBAASC,EAAT,KAAgB,KAAtG,EAA6G;AAC3G2K,YAAAA,OAAO,CAACC,IAAR;AACD;AACF;;AACD,YAAIrK,2BAA2B,CAACsK,QAA5B,CAAqCH,kBAArC,CAAJ,EAA8D;AAC5D,iBAAOA,kBAAP;AACD;;AAED,YAAIvD,OAAJ,EAAa;AACXwD,UAAAA,OAAO,CAACG,KAAR,6EAAwFvK,2BAA2B,CAACwK,IAA5B,CAAiC,IAAjC,CAAxF,sBAA+IC,IAAI,CAACC,SAAL,CAAeP,kBAAf,CAA/I;AACD;AACF;;AAED,UAAI3K,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,MAAP;AACD,OAFD,MAEO;AACL,eAAO,QAAP;AACD;AACF;;;iDAE4B;AAG3B,UAAID,sBAASC,EAAT,KAAgB,SAAhB,IAA6B,KAAK4G,cAAL,OAA0B,QAA3D,EAAqE;AACnE,eAAO,eAAP;AACD;;AAL0B,UAOnBsE,sBAPmB,GAOQ,KAAKzJ,KAPb,CAOnByJ,sBAPmB;;AAQ3B,UAAIA,sBAAJ,EAA4B;AAC1B,YAAI1K,+BAA+B,CAACqK,QAAhC,CAAyCK,sBAAzC,CAAJ,EAAsE;AACpE,iBAAOA,sBAAP;AACD;;AAED,YAAI/D,OAAJ,EAAa;AACXwD,UAAAA,OAAO,CAACG,KAAR,iFAA4FtK,+BAA+B,CAACuK,IAAhC,CAAqC,IAArC,CAA5F,sBAAuJC,IAAI,CAACC,SAAL,CAAeC,sBAAf,CAAvJ;AACD;AACF;;AAED,aAAO,eAAP;AACD;;;iDAE4B;AAAA,UACnBC,sBADmB,GACQ,KAAK1J,KADb,CACnB0J,sBADmB;AAG3B,aAAOA,sBAAP;AACD;;;sCAEiB1I,K,EAAO;AAAA,8BACcA,KAAK,CAACW,UADpB;AAAA,UACfnB,UADe,qBACfA,UADe;AAAA,UACHmJ,YADG,qBACHA,YADG;AAEvB,UAAMC,cAAc,GAAGD,YAAY,EAAnC;AAFuB,UAIfE,WAJe,GAIC,KAAK7J,KAJN,CAIf6J,WAJe;;AAKvB,UAAM3E,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,UAAID,UAAU,KAAK,QAAnB,EAA6B;AAC3B,eAAO,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEsD,MAAM,CAACO,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA,WACH,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEP,MAAM,CAACb,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,6BAAC,0BAAD;AAAW,UAAA,WAAW,EAAEkC,WAAxB;AAAqC,UAAA,UAAU,EAAErJ,UAAjD;AAA6D,UAAA,SAAS,EAAEoJ,cAAxE;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADG,EAIF,KAAKnB,aAAL,CAAmBzH,KAAnB,EAA0BkE,UAA1B,CAJE,CAAP;AAMD;;AACD,aAAO,6BAAC,0BAAD;AAAW,QAAA,WAAW,EAAE2E,WAAxB;AAAqC,QAAA,UAAU,EAAErJ,UAAjD;AAA6D,QAAA,SAAS,EAAEoJ,cAAxE;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;EAvZ2BhE,eAAMkE,S;;AAobpC,IAAMtB,MAAM,GAAGuB,wBAAWzJ,MAAX,CAAkB;AAC/ByI,EAAAA,SAAS,EAAE;AACTiB,IAAAA,IAAI,EAAE,CADG;AAMTC,IAAAA,aAAa,EAAE,gBANN;AAOTC,IAAAA,QAAQ,EAAE;AAPD,GADoB;AAU/BvC,EAAAA,MAAM,EAAE;AACNqC,IAAAA,IAAI,EAAE;AADA,GAVuB;AAa/BzB,EAAAA,cAAc,EAAE;AACdxH,IAAAA,QAAQ,EAAE,UADI;AAEdoJ,IAAAA,IAAI,EAAE,CAFQ;AAGdC,IAAAA,GAAG,EAAE,CAHS;AAIdC,IAAAA,KAAK,EAAE;AAJO;AAbe,CAAlB,CAAf;;eAqBe,sCAAgBtK,eAAhB,C","sourcesContent":["import React from 'react';\n\nimport clamp from '../../utils/clamp';\nimport { Animated, StyleSheet, PanResponder, Platform, View, I18nManager, Easing, Dimensions } from 'react-native';\nimport { SceneView, StackActions, NavigationActions, withOrientation, NavigationProvider } from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\n\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\n\nconst emptyFunction = () => {};\n\nconst IPHONE_XS_HEIGHT = 812; // iPhone X and XS\nconst IPHONE_XR_HEIGHT = 896; // iPhone XR and XS Max\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * Enumerate possible values for validation\n */\nconst HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];\nconst HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The threshold (in pixels) to start the gesture action.\n */\nconst RESPOND_THRESHOLD = 20;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst animatedSubscribeValue = animatedValue => {\n  if (!animatedValue.__isNative) {\n    return;\n  }\n  if (Object.keys(animatedValue._listeners).length === 0) {\n    animatedValue.addListener(emptyFunction);\n  }\n};\n\nconst getDefaultHeaderHeight = isLandscape => {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else {\n    return 56;\n  }\n};\n\nclass StackViewLayout extends React.Component {\n  /**\n   * Used to identify the starting point of the position when the gesture starts, such that it can\n   * be updated according to its relative position. This means that a card can effectively be\n   * \"caught\"- If a gesture starts while a card is animating, the card does not jump into a\n   * corresponding location for the touch.\n   */\n  _gestureStartValue = 0;\n\n  // tracks if a touch is currently happening\n  _isResponding = false;\n\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  _immediateIndex = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n  }\n\n  _renderHeader(scene, headerMode) {\n    const { options } = scene.descriptor;\n    const { header } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(`Invalid header value: \"${header}\". The header option must be a valid React component or null, not a string.`);\n    }\n\n    if (header === null && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader = header || (props => <Header {...props} />);\n\n    const {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator\n    } = this._getTransitionConfig();\n\n    const { transitionProps, ...passProps } = this.props;\n\n    return <NavigationProvider value={scene.descriptor.navigation}>\n        {renderHeader({\n        ...passProps,\n        ...transitionProps,\n        scene,\n        mode: headerMode,\n        transitionPreset: this._getHeaderTransitionPreset(),\n        layoutPreset: this._getHeaderLayoutPreset(),\n        backTitleVisible: this._getheaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })}\n      </NavigationProvider>;\n  }\n\n  _animatedSubscribe(props) {\n    // Hack to make this work with native driven animations. We add a single listener\n    // so the JS value of the following animated values gets updated. We rely on\n    // some Animated private APIs and not doing so would require using a bunch of\n    // value listeners but we'd have to remove them to not leak and I'm not sure\n    // when we'd do that with the current structure we have. `stopAnimation` callback\n    // is also broken with native animated values that have no listeners so if we\n    // want to remove this we have to fix this too.\n    animatedSubscribeValue(props.transitionProps.layout.width);\n    animatedSubscribeValue(props.transitionProps.layout.height);\n    animatedSubscribeValue(props.transitionProps.position);\n  }\n\n  _reset(resetToIndex, duration) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: this.props.transitionProps.position.__isNative\n      }).start();\n    } else {\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: this.props.transitionProps.position.__isNative\n      }).start();\n    }\n  }\n\n  _goBack(backFromIndex, duration) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this._immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this._immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (!this._isResponding && backFromScene) {\n        navigation.dispatch(NavigationActions.back({\n          key: backFromScene.route.key,\n          immediate: true\n        }));\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(position, {\n        toValue,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: position.__isNative\n      }).start(onCompleteAnimation);\n    } else {\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: position.__isNative\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  _panResponder = PanResponder.create({\n    onPanResponderTerminate: () => {\n      const { navigation } = this.props.transitionProps;\n      const { index } = navigation.state;\n      this._isResponding = false;\n      this._reset(index, 0);\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    },\n    onPanResponderGrant: () => {\n      const {\n        transitionProps: { navigation, position, scene }\n      } = this.props;\n      const { index } = navigation.state;\n\n      if (index !== scene.index) {\n        return false;\n      }\n\n      position.stopAnimation(value => {\n        this._isResponding = true;\n        this._gestureStartValue = value;\n      });\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    },\n    onMoveShouldSetPanResponder: (event, gesture) => {\n      const {\n        transitionProps: { navigation, layout, scene },\n        mode\n      } = this.props;\n      const { index } = navigation.state;\n      const isVertical = mode === 'modal';\n      const { options } = scene.descriptor;\n      const gestureDirection = options.gestureDirection;\n\n      const gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n      if (index !== scene.index) {\n        return false;\n      }\n\n      const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n      const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n      const currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n      const axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      const axisHasBeenMeasured = !!axisLength;\n\n      // Measure the distance from the touch to the edge of the screen\n      const screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n      // Compare to the gesture distance relavant to card or modal\n\n      const {\n        gestureResponseDistance: userGestureResponseDistance = {}\n      } = options;\n      const gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      // GESTURE_RESPONSE_DISTANCE is about 25 or 30. Or 135 for modals\n      if (screenEdgeDistance > gestureResponseDistance) {\n        // Reject touches that started in the middle of the screen\n        return false;\n      }\n\n      const hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n\n      const isOnFirstCard = immediateIndex === 0;\n      const shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n      return shouldSetResponder;\n    },\n    onPanResponderMove: (event, gesture) => {\n      const {\n        transitionProps: { navigation, position, layout, scene },\n        mode\n      } = this.props;\n      const { index } = navigation.state;\n      const isVertical = mode === 'modal';\n      const { options } = scene.descriptor;\n      const gestureDirection = options.gestureDirection;\n\n      const gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n      // Handle the moving touches for our granted responder\n      const startValue = this._gestureStartValue;\n      const axis = isVertical ? 'dy' : 'dx';\n      const axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      const currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n      const value = clamp(index - 1, currentValue, index);\n      position.setValue(value);\n    },\n    onPanResponderTerminationRequest: () =>\n    // Returning false will prevent other views from becoming responder while\n    // the navigation view is the responder (mid-gesture)\n    false,\n    onPanResponderRelease: (event, gesture) => {\n      const {\n        transitionProps: { navigation, position, layout, scene },\n        mode\n      } = this.props;\n      const { index } = navigation.state;\n      const isVertical = mode === 'modal';\n      const { options } = scene.descriptor;\n      const gestureDirection = options.gestureDirection;\n\n      const gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n      if (!this._isResponding) {\n        return;\n      }\n      this._isResponding = false;\n\n      const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n\n      // Calculate animate duration according to gesture speed and moved distance\n      const axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      const movementDirection = gestureDirectionInverted ? -1 : 1;\n      const movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n      const gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n      const defaultVelocity = axisDistance / ANIMATION_DURATION;\n      const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      const resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n      const goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n\n      // To asyncronously get the current animated value, we need to run stopAnimation:\n      position.stopAnimation(value => {\n        // If the speed of the gesture release is significant, use that as the indication\n        // of intent\n        if (gestureVelocity < -0.5) {\n          this.props.onGestureCanceled && this.props.onGestureCanceled();\n          this._reset(immediateIndex, resetDuration);\n          return;\n        }\n        if (gestureVelocity > 0.5) {\n          this.props.onGestureFinish && this.props.onGestureFinish();\n          this._goBack(immediateIndex, goBackDuration);\n          return;\n        }\n\n        // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n        // and the back will happen.\n        if (value <= index - POSITION_THRESHOLD) {\n          this.props.onGestureFinish && this.props.onGestureFinish();\n          this._goBack(immediateIndex, goBackDuration);\n        } else {\n          this.props.onGestureCanceled && this.props.onGestureCanceled();\n          this._reset(immediateIndex, resetDuration);\n        }\n      });\n    }\n  });\n\n  _onFloatingHeaderLayout = e => {\n    this.setState({ floatingHeaderHeight: e.nativeEvent.layout.height });\n  };\n\n  render() {\n    let floatingHeader = null;\n    const headerMode = this._getHeaderMode();\n\n    if (headerMode === 'float') {\n      const { scene } = this.props.transitionProps;\n      floatingHeader = <View style={styles.floatingHeader} pointerEvents=\"box-none\" onLayout={this._onFloatingHeaderLayout}>\n          {this._renderHeader(scene, headerMode)}\n        </View>;\n    }\n    const {\n      transitionProps: { scene, scenes }\n    } = this.props;\n    const { options } = scene.descriptor;\n\n    const gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : Platform.OS === 'ios';\n\n    const responder = !gesturesEnabled ? null : this._panResponder;\n\n    const handlers = gesturesEnabled ? responder.panHandlers : {};\n    const containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n\n    return <View {...handlers} style={containerStyle}>\n        <ScreenContainer style={styles.scenes}>\n          {scenes.map(s => this._renderCard(s))}\n        </ScreenContainer>\n        {floatingHeader}\n      </View>;\n  }\n\n  _getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    return 'float';\n  }\n\n  _getHeaderLayoutPreset() {\n    const { headerLayoutPreset } = this.props;\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n          console.warn(`headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'`);\n        }\n      }\n      if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(`Invalid configuration applied for headerLayoutPreset - expected one of ${HEADER_LAYOUT_PRESET_VALUES.join(', ')} but received ${JSON.stringify(headerLayoutPreset)}`);\n      }\n    }\n\n    if (Platform.OS === 'android') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  _getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    const { headerTransitionPreset } = this.props;\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(`Invalid configuration applied for headerTransitionPreset - expected one of ${HEADER_TRANSITION_PRESET_VALUES.join(', ')} but received ${JSON.stringify(headerTransitionPreset)}`);\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  _getheaderBackTitleVisible() {\n    const { headerBackTitleVisible } = this.props;\n\n    return headerBackTitleVisible;\n  }\n\n  _renderInnerScene(scene) {\n    const { navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this._getHeaderMode();\n    if (headerMode === 'screen') {\n      return <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView screenProps={screenProps} navigation={navigation} component={SceneComponent} />\n          </View>\n          {this._renderHeader(scene, headerMode)}\n        </View>;\n    }\n    return <SceneView screenProps={screenProps} navigation={navigation} component={SceneComponent} />;\n  }\n\n  _getTransitionConfig = () => {\n    const isModal = this.props.mode === 'modal';\n\n    return TransitionConfigs.getTransitionConfig(this.props.transitionConfig, this.props.transitionProps, this.props.lastTransitionProps, isModal);\n  };\n\n  _renderCard = scene => {\n    const { screenInterpolator } = this._getTransitionConfig();\n\n    const style = screenInterpolator && screenInterpolator({ ...this.props.transitionProps, scene });\n\n    // When using a floating header, we need to add some top\n    // padding on the scene.\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null;\n    const headerMode = this._getHeaderMode();\n    let paddingTop = 0;\n    if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n      paddingTop = this.state.floatingHeaderHeight;\n    }\n\n    return <Card {...this.props.transitionProps} key={`card_${scene.key}`} transparent={this.props.transparentCard} style={[style, { paddingTop }, this.props.cardStyle]} scene={scene}>\n        {this._renderInnerScene(scene)}\n      </Card>;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\n\nexport default withOrientation(StackViewLayout);"]},"metadata":{},"sourceType":"script"}