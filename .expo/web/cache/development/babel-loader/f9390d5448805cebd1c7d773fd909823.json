{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TouchableItem = _interopRequireDefault(require(\"../TouchableItem\"));\n\nvar _backIcon = _interopRequireDefault(require(\"../assets/back-icon.png\"));\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\Header\\\\HeaderBackButton.js\";\n\nvar HeaderBackButton = function (_React$PureComponent) {\n  (0, _inherits2.default)(HeaderBackButton, _React$PureComponent);\n\n  function HeaderBackButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, HeaderBackButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this._onTextLayout = function (e) {\n      if (_this.state.initialTextWidth) {\n        return;\n      }\n\n      _this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(HeaderBackButton, [{\n    key: \"_renderBackImage\",\n    value: function _renderBackImage() {\n      var _this$props = this.props,\n          backImage = _this$props.backImage,\n          title = _this$props.title,\n          tintColor = _this$props.tintColor;\n      var BackImage;\n      var props;\n\n      if (_react.default.isValidElement(backImage)) {\n        return backImage;\n      } else if (backImage) {\n        BackImage = backImage;\n        props = {\n          tintColor: tintColor,\n          title: title\n        };\n      } else {\n        BackImage = _reactNative.Image;\n        props = {\n          style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {\n            tintColor: tintColor\n          }],\n          source: _backIcon.default\n        };\n      }\n\n      return _react.default.createElement(BackImage, (0, _extends2.default)({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      }));\n    }\n  }, {\n    key: \"_maybeRenderTitle\",\n    value: function _maybeRenderTitle() {\n      var _this$props2 = this.props,\n          layoutPreset = _this$props2.layoutPreset,\n          backTitleVisible = _this$props2.backTitleVisible,\n          width = _this$props2.width,\n          title = _this$props2.title,\n          titleStyle = _this$props2.titleStyle,\n          tintColor = _this$props2.tintColor,\n          truncatedTitle = _this$props2.truncatedTitle;\n      var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n      var backButtonTitle = renderTruncated ? truncatedTitle : title;\n      var titleDefaultsToDisabled = layoutPreset === 'left' || _reactNative.Platform.OS === 'android' || typeof backButtonTitle !== 'string';\n\n      if (titleDefaultsToDisabled && !backTitleVisible) {\n        return null;\n      }\n\n      return _react.default.createElement(_reactNative.Text, {\n        accessible: false,\n        onLayout: this._onTextLayout,\n        style: [styles.title, !!tintColor && {\n          color: tintColor\n        }, titleStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }, backButtonTitle);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          onPress = _this$props3.onPress,\n          pressColorAndroid = _this$props3.pressColorAndroid,\n          title = _this$props3.title;\n\n      var button = _react.default.createElement(_TouchableItem.default, {\n        accessible: true,\n        accessibilityComponentType: \"button\",\n        accessibilityLabel: title,\n        accessibilityTraits: \"button\",\n        testID: \"header-back\",\n        delayPressIn: 0,\n        onPress: onPress,\n        pressColor: pressColorAndroid,\n        style: styles.container,\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        }\n      }, this._renderBackImage(), this._maybeRenderTitle()));\n\n      if (_reactNative.Platform.OS === 'android') {\n        return _react.default.createElement(_reactNative.View, {\n          style: styles.androidButtonWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          }\n        }, button);\n      } else {\n        return button;\n      }\n    }\n  }]);\n  return HeaderBackButton;\n}(_react.default.PureComponent);\n\nHeaderBackButton.defaultProps = {\n  pressColorAndroid: 'rgba(0, 0, 0, .32)',\n  tintColor: _reactNative.Platform.select({\n    ios: '#037aff'\n  }),\n  truncatedTitle: 'Back'\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent'\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: _reactNative.Platform.OS === 'ios' ? {\n    height: 21,\n    width: 13,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: _reactNative.I18nManager.isRTL ? -1 : 1\n    }]\n  } : {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: _reactNative.I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  iconWithTitle: _reactNative.Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\n\nvar _default = HeaderBackButton;\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-stack/dist/views/Header/HeaderBackButton.js"],"names":["HeaderBackButton","state","_onTextLayout","e","initialTextWidth","setState","nativeEvent","layout","x","width","props","backImage","title","tintColor","BackImage","React","isValidElement","Image","style","styles","icon","iconWithTitle","source","defaultBackImage","layoutPreset","backTitleVisible","titleStyle","truncatedTitle","renderTruncated","backButtonTitle","titleDefaultsToDisabled","Platform","OS","color","onPress","pressColorAndroid","button","container","_renderBackImage","_maybeRenderTitle","androidButtonWrapper","PureComponent","defaultProps","select","ios","StyleSheet","create","margin","backgroundColor","alignItems","flexDirection","fontSize","paddingRight","height","marginLeft","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","isRTL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { I18nManager, Image, Text, View, Platform, StyleSheet } from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\n\nclass HeaderBackButton extends React.PureComponent {\n  static defaultProps = {\n    pressColorAndroid: 'rgba(0, 0, 0, .32)',\n    tintColor: Platform.select({\n      ios: '#037aff'\n    }),\n    truncatedTitle: 'Back'\n  };\n\n  state = {};\n\n  _onTextLayout = e => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n    });\n  };\n\n  _renderBackImage() {\n    const { backImage, title, tintColor } = this.props;\n\n    let BackImage;\n    let props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      BackImage = backImage;\n      props = {\n        tintColor,\n        title\n      };\n    } else {\n      BackImage = Image;\n      props = {\n        style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && { tintColor }],\n        source: defaultBackImage\n      };\n    }\n\n    return <BackImage {...props} />;\n  }\n\n  _maybeRenderTitle() {\n    const {\n      layoutPreset,\n      backTitleVisible,\n      width,\n      title,\n      titleStyle,\n      tintColor,\n      truncatedTitle\n    } = this.props;\n\n    const renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n\n    const backButtonTitle = renderTruncated ? truncatedTitle : title;\n\n    // If the left preset is used and we aren't on Android, then we\n    // default to disabling the label\n    const titleDefaultsToDisabled = layoutPreset === 'left' || Platform.OS === 'android' || typeof backButtonTitle !== 'string';\n\n    // If the title is explicitly enabled then we respect that\n    if (titleDefaultsToDisabled && !backTitleVisible) {\n      return null;\n    }\n\n    return <Text accessible={false} onLayout={this._onTextLayout} style={[styles.title, !!tintColor && { color: tintColor }, titleStyle]} numberOfLines={1}>\n        {backButtonTitle}\n      </Text>;\n  }\n\n  render() {\n    const { onPress, pressColorAndroid, title } = this.props;\n\n    let button = <TouchableItem accessible accessibilityComponentType=\"button\" accessibilityLabel={title} accessibilityTraits=\"button\" testID=\"header-back\" delayPressIn={0} onPress={onPress} pressColor={pressColorAndroid} style={styles.container} borderless>\n        <View style={styles.container}>\n          {this._renderBackImage()}\n          {this._maybeRenderTitle()}\n        </View>\n      </TouchableItem>;\n\n    if (Platform.OS === 'android') {\n      return <View style={styles.androidButtonWrapper}>{button}</View>;\n    } else {\n      return button;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent'\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: Platform.OS === 'ios' ? {\n    height: 21,\n    width: 13,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]\n  } : {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]\n  },\n  iconWithTitle: Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\n\nexport default HeaderBackButton;"]},"metadata":{},"sourceType":"script"}