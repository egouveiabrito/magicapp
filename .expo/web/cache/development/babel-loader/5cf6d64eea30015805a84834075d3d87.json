{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeDrawerLayoutPolyfill = _interopRequireDefault(require(\"react-native-drawer-layout-polyfill\"));\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _DrawerSidebar = _interopRequireDefault(require(\"./DrawerSidebar\"));\n\nvar _DrawerActions = _interopRequireDefault(require(\"../routers/DrawerActions\"));\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-drawer\\\\dist\\\\views\\\\DrawerView.js\";\n\nvar DrawerView = function (_React$PureComponent) {\n  (0, _inherits2.default)(DrawerView, _React$PureComponent);\n\n  function DrawerView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n\n    _this._handleDrawerOpen = function () {\n      _this.props.navigation.dispatch({\n        type: _DrawerActions.default.DRAWER_OPENED,\n        key: _this.props.navigation.state.key\n      });\n    };\n\n    _this._handleDrawerClose = function () {\n      _this.props.navigation.dispatch({\n        type: _DrawerActions.default.DRAWER_CLOSED,\n        key: _this.props.navigation.state.key\n      });\n    };\n\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n\n    _this._renderNavigationView = function () {\n      return _react.default.createElement(_DrawerSidebar.default, (0, _extends2.default)({\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors,\n        contentComponent: _this.props.navigationConfig.contentComponent,\n        contentOptions: _this.props.navigationConfig.contentOptions,\n        drawerPosition: _this.props.navigationConfig.drawerPosition,\n        style: _this.props.navigationConfig.style\n      }, _this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _reactNative.Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$navigatio = this.props.navigation.state,\n          openId = _this$props$navigatio.openId,\n          closeId = _this$props$navigatio.closeId,\n          toggleId = _this$props$navigatio.toggleId,\n          isDrawerOpen = _this$props$navigatio.isDrawerOpen;\n      var _prevProps$navigation = prevProps.navigation.state,\n          prevOpenId = _prevProps$navigation.openId,\n          prevCloseId = _prevProps$navigation.closeId,\n          prevToggleId = _prevProps$navigation.toggleId;\n\n      if (openId !== prevOpenId) {\n        this._drawer.openDrawer();\n      } else if (closeId !== prevCloseId) {\n        this._drawer.closeDrawer();\n      } else if (toggleId !== prevToggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _reactNative.Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var state = this.props.navigation.state;\n      var activeKey = state.routes[state.index].key;\n      var descriptor = this.props.descriptors[activeKey];\n      var drawerLockMode = descriptor.options.drawerLockMode;\n      return _react.default.createElement(_reactNativeDrawerLayoutPolyfill.default, {\n        ref: function ref(c) {\n          _this2._drawer = c;\n        },\n        drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n        drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? _reactNativeDrawerLayoutPolyfill.default.positions.Right : _reactNativeDrawerLayoutPolyfill.default.positions.Left,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        }\n      }, _react.default.createElement(_reactNavigation.SceneView, {\n        navigation: descriptor.navigation,\n        screenProps: this.props.screenProps,\n        component: descriptor.getComponent(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        }\n      }));\n    }\n  }]);\n  return DrawerView;\n}(_react.default.PureComponent);\n\nexports.default = DrawerView;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"names":["DrawerView","state","drawerWidth","props","navigationConfig","_handleDrawerOpen","navigation","dispatch","type","DrawerActions","DRAWER_OPENED","key","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","Dimensions","addEventListener","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","_drawer","openDrawer","closeDrawer","removeEventListener","activeKey","routes","index","descriptor","drawerLockMode","options","c","drawerBackgroundColor","useNativeAnimations","DrawerLayout","positions","Right","Left","getComponent","React","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions } from 'react-native';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\nimport { SceneView } from 'react-navigation';\n\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerActions from '../routers/DrawerActions';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  state = {\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    if (openId !== prevOpenId) {\n      this._drawer.openDrawer();\n    } else if (closeId !== prevCloseId) {\n      this._drawer.closeDrawer();\n    } else if (toggleId !== prevToggleId) {\n      if (isDrawerOpen) {\n        this._drawer.closeDrawer();\n      } else {\n        this._drawer.openDrawer();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = () => {\n    return <DrawerSidebar screenProps={this.props.screenProps} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />;\n  };\n\n  render() {\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n\n    const { drawerLockMode } = descriptor.options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}>\n        <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n      </DrawerLayout>;\n  }\n}"]},"metadata":{},"sourceType":"script"}