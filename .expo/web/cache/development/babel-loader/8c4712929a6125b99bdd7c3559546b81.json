{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeTabView = require(\"react-native-tab-view\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation-deprecated-tab-navigator\\\\src\\\\views\\\\TabView.js\";\n\nvar TabView = function (_React$PureComponent) {\n  (0, _inherits2.default)(TabView, _React$PureComponent);\n\n  function TabView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._handlePageChanged = function (index) {\n      var routeName = _this.props.navigation.state.routes[index].routeName;\n\n      _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({\n        routeName: routeName\n      }));\n    };\n\n    _this._renderScene = function (_ref) {\n      var route = _ref.route;\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigation = _this$props.navigation,\n          descriptors = _this$props.descriptors;\n      var _this$props$navigatio = _this.props.navigationConfig,\n          lazy = _this$props$navigatio.lazy,\n          removeClippedSubviews = _this$props$navigatio.removeClippedSubviews,\n          animationEnabled = _this$props$navigatio.animationEnabled,\n          swipeEnabled = _this$props$navigatio.swipeEnabled;\n      var descriptor = descriptors[route.key];\n      var focusedIndex = navigation.state.index;\n      var focusedKey = navigation.state.routes[focusedIndex].key;\n      var key = route.key;\n      var TabComponent = descriptor.getComponent();\n      return _react.default.createElement(_reactNavigation.ResourceSavingSceneView, {\n        lazy: lazy,\n        isFocused: focusedKey === key,\n        removeClippedSubViews: removeClippedSubviews,\n        animationEnabled: animationEnabled,\n        swipeEnabled: swipeEnabled,\n        screenProps: screenProps,\n        component: TabComponent,\n        navigation: navigation,\n        childNavigation: descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        }\n      });\n    };\n\n    _this._getLabel = function (_ref2) {\n      var route = _ref2.route,\n          tintColor = _ref2.tintColor,\n          focused = _ref2.focused;\n      var _this$props2 = _this.props,\n          screenProps = _this$props2.screenProps,\n          descriptors = _this$props2.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _this._getOnPress = function (previousScene, _ref3) {\n      var route = _ref3.route;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      return options.tabBarOnPress;\n    };\n\n    _this._getTestIDProps = function (_ref4) {\n      var route = _ref4.route;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({\n        focused: focused\n      }) : options.tabBarTestIDProps;\n    };\n\n    _this._renderIcon = function (_ref5) {\n      var focused = _ref5.focused,\n          route = _ref5.route,\n          tintColor = _ref5.tintColor;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _this._renderTabBar = function (props) {\n      var _this$props$navigatio2 = _this.props.navigationConfig,\n          tabBarOptions = _this$props$navigatio2.tabBarOptions,\n          TabBarComponent = _this$props$navigatio2.tabBarComponent,\n          animationEnabled = _this$props$navigatio2.animationEnabled,\n          tabBarPosition = _this$props$navigatio2.tabBarPosition;\n\n      if (typeof TabBarComponent === 'undefined') {\n        return null;\n      }\n\n      return _react.default.createElement(TabBarComponent, (0, _extends2.default)({}, props, tabBarOptions, {\n        tabBarPosition: tabBarPosition,\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        getLabel: _this._getLabel,\n        getTestIDProps: _this._getTestIDProps,\n        getOnPress: _this._getOnPress,\n        renderIcon: _this._renderIcon,\n        animationEnabled: animationEnabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }));\n    };\n\n    _this._renderPager = function (props) {\n      return _react.default.createElement(_reactNativeTabView.TabViewPagerPan, (0, _extends2.default)({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$navigatio3 = this.props.navigationConfig,\n          tabBarComponent = _this$props$navigatio3.tabBarComponent,\n          tabBarPosition = _this$props$navigatio3.tabBarPosition,\n          animationEnabled = _this$props$navigatio3.animationEnabled,\n          configureTransition = _this$props$navigatio3.configureTransition,\n          initialLayout = _this$props$navigatio3.initialLayout;\n      var renderHeader;\n      var renderFooter;\n      var renderPager;\n      var state = this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var swipeEnabled = options.swipeEnabled == null ? this.props.navigationConfig.swipeEnabled : options.swipeEnabled;\n\n      if (typeof swipeEnabled === 'function') {\n        swipeEnabled = swipeEnabled(state);\n      }\n\n      if (tabBarComponent !== undefined && tabBarVisible) {\n        if (tabBarPosition === 'bottom') {\n          renderFooter = this._renderTabBar;\n        } else {\n          renderHeader = this._renderTabBar;\n        }\n      }\n\n      if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {\n        renderPager = this._renderPager;\n      }\n\n      var props = {\n        initialLayout: initialLayout,\n        animationEnabled: animationEnabled,\n        configureTransition: configureTransition,\n        swipeEnabled: swipeEnabled,\n        renderPager: renderPager,\n        renderHeader: renderHeader,\n        renderFooter: renderFooter,\n        renderScene: this._renderScene,\n        onIndexChange: this._handlePageChanged,\n        navigationState: this.props.navigation.state,\n        style: styles.container\n      };\n      return _react.default.createElement(_reactNativeTabView.TabViewAnimated, (0, _extends2.default)({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }));\n    }\n  }]);\n  return TabView;\n}(_react.default.PureComponent);\n\nTabView.defaultProps = {\n  lazy: true,\n  removedClippedSubviews: true,\n  initialLayout: _reactNative.Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  })\n};\nvar _default = TabView;\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabView.js"],"names":["TabView","_handlePageChanged","index","routeName","props","navigation","state","routes","dispatch","NavigationActions","navigate","_renderScene","route","screenProps","descriptors","navigationConfig","lazy","removeClippedSubviews","animationEnabled","swipeEnabled","descriptor","key","focusedIndex","focusedKey","TabComponent","getComponent","_getLabel","tintColor","focused","options","tabBarLabel","title","_getOnPress","previousScene","tabBarOnPress","_getTestIDProps","tabBarTestIDProps","_renderIcon","tabBarIcon","_renderTabBar","tabBarOptions","TabBarComponent","tabBarComponent","tabBarPosition","_renderPager","configureTransition","initialLayout","renderHeader","renderFooter","renderPager","tabBarVisible","undefined","renderScene","onIndexChange","navigationState","style","styles","container","React","PureComponent","defaultProps","removedClippedSubviews","Platform","select","android","width","height","StyleSheet","create","flex"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;IAEMA,O;;;;;;;;;;;;;;;;UAUJC,kB,GAAqB,UAAAC,KAAK,EAAI;AAAA,UACtBC,SADsB,GACR,MAAKC,KAAL,CAAWC,UAAX,CAAsBC,KAAtB,CAA4BC,MAA5B,CAAmCL,KAAnC,CADQ,CACtBC,SADsB;;AAE5B,YAAKC,KAAL,CAAWC,UAAX,CAAsBG,QAAtB,CAA+BC,mCAAkBC,QAAlB,CAA2B;AAAEP,QAAAA,SAAS,EAATA;AAAF,OAA3B,CAA/B;AACD,K;;UAEDQ,Y,GAAe,gBAAe;AAAA,UAAZC,KAAY,QAAZA,KAAY;AAAA,wBACqB,MAAKR,KAD1B;AAAA,UACpBS,WADoB,eACpBA,WADoB;AAAA,UACPR,UADO,eACPA,UADO;AAAA,UACKS,WADL,eACKA,WADL;AAAA,kCAOxB,MAAKV,KAAL,CAAWW,gBAPa;AAAA,UAG1BC,IAH0B,yBAG1BA,IAH0B;AAAA,UAI1BC,qBAJ0B,yBAI1BA,qBAJ0B;AAAA,UAK1BC,gBAL0B,yBAK1BA,gBAL0B;AAAA,UAM1BC,YAN0B,yBAM1BA,YAN0B;AAQ5B,UAAMC,UAAU,GAAGN,WAAW,CAACF,KAAK,CAACS,GAAP,CAA9B;AACA,UAAMC,YAAY,GAAGjB,UAAU,CAACC,KAAX,CAAiBJ,KAAtC;AACA,UAAMqB,UAAU,GAAGlB,UAAU,CAACC,KAAX,CAAiBC,MAAjB,CAAwBe,YAAxB,EAAsCD,GAAzD;AACA,UAAMA,GAAG,GAAGT,KAAK,CAACS,GAAlB;AACA,UAAMG,YAAY,GAAGJ,UAAU,CAACK,YAAX,EAArB;AACA,aACE,6BAAC,wCAAD;AACE,QAAA,IAAI,EAAET,IADR;AAEE,QAAA,SAAS,EAAEO,UAAU,KAAKF,GAF5B;AAGE,QAAA,qBAAqB,EAAEJ,qBAHzB;AAIE,QAAA,gBAAgB,EAAEC,gBAJpB;AAKE,QAAA,YAAY,EAAEC,YALhB;AAME,QAAA,WAAW,EAAEN,WANf;AAOE,QAAA,SAAS,EAAEW,YAPb;AAQE,QAAA,UAAU,EAAEnB,UARd;AASE,QAAA,eAAe,EAAEe,UAAU,CAACf,UAT9B;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD,K;;UAEDqB,S,GAAY,iBAAmC;AAAA,UAAhCd,KAAgC,SAAhCA,KAAgC;AAAA,UAAzBe,SAAyB,SAAzBA,SAAyB;AAAA,UAAdC,OAAc,SAAdA,OAAc;AAAA,yBACR,MAAKxB,KADG;AAAA,UACrCS,WADqC,gBACrCA,WADqC;AAAA,UACxBC,WADwB,gBACxBA,WADwB;AAE7C,UAAMM,UAAU,GAAGN,WAAW,CAACF,KAAK,CAACS,GAAP,CAA9B;AACA,UAAMQ,OAAO,GAAGT,UAAU,CAACS,OAA3B;;AAEA,UAAIA,OAAO,CAACC,WAAZ,EAAyB;AACvB,eAAO,OAAOD,OAAO,CAACC,WAAf,KAA+B,UAA/B,GACHD,OAAO,CAACC,WAAR,CAAoB;AAAEH,UAAAA,SAAS,EAATA,SAAF;AAAaC,UAAAA,OAAO,EAAPA;AAAb,SAApB,CADG,GAEHC,OAAO,CAACC,WAFZ;AAGD;;AAED,UAAI,OAAOD,OAAO,CAACE,KAAf,KAAyB,QAA7B,EAAuC;AACrC,eAAOF,OAAO,CAACE,KAAf;AACD;;AAED,aAAOnB,KAAK,CAACT,SAAb;AACD,K;;UAED6B,W,GAAc,UAACC,aAAD,SAA8B;AAAA,UAAZrB,KAAY,SAAZA,KAAY;AAAA,UAClCE,WADkC,GAClB,MAAKV,KADa,CAClCU,WADkC;AAE1C,UAAMM,UAAU,GAAGN,WAAW,CAACF,KAAK,CAACS,GAAP,CAA9B;AACA,UAAMQ,OAAO,GAAGT,UAAU,CAACS,OAA3B;AAEA,aAAOA,OAAO,CAACK,aAAf;AACD,K;;UAEDC,e,GAAkB,iBAAe;AAAA,UAAZvB,KAAY,SAAZA,KAAY;AAAA,UACvBE,WADuB,GACP,MAAKV,KADE,CACvBU,WADuB;AAE/B,UAAMM,UAAU,GAAGN,WAAW,CAACF,KAAK,CAACS,GAAP,CAA9B;AACA,UAAMQ,OAAO,GAAGT,UAAU,CAACS,OAA3B;AAEA,aAAO,OAAOA,OAAO,CAACO,iBAAf,KAAqC,UAArC,GACHP,OAAO,CAACO,iBAAR,CAA0B;AAAER,QAAAA,OAAO,EAAPA;AAAF,OAA1B,CADG,GAEHC,OAAO,CAACO,iBAFZ;AAGD,K;;UAEDC,W,GAAc,iBAAmC;AAAA,UAAhCT,OAAgC,SAAhCA,OAAgC;AAAA,UAAvBhB,KAAuB,SAAvBA,KAAuB;AAAA,UAAhBe,SAAgB,SAAhBA,SAAgB;AAAA,UACvCb,WADuC,GACvB,MAAKV,KADkB,CACvCU,WADuC;AAE/C,UAAMM,UAAU,GAAGN,WAAW,CAACF,KAAK,CAACS,GAAP,CAA9B;AACA,UAAMQ,OAAO,GAAGT,UAAU,CAACS,OAA3B;;AAEA,UAAIA,OAAO,CAACS,UAAZ,EAAwB;AACtB,eAAO,OAAOT,OAAO,CAACS,UAAf,KAA8B,UAA9B,GACHT,OAAO,CAACS,UAAR,CAAmB;AAAEX,UAAAA,SAAS,EAATA,SAAF;AAAaC,UAAAA,OAAO,EAAPA;AAAb,SAAnB,CADG,GAEHC,OAAO,CAACS,UAFZ;AAGD;;AACD,aAAO,IAAP;AACD,K;;UAEDC,a,GAAgB,UAAAnC,KAAK,EAAI;AAAA,mCAMnB,MAAKA,KAAL,CAAWW,gBANQ;AAAA,UAErByB,aAFqB,0BAErBA,aAFqB;AAAA,UAGJC,eAHI,0BAGrBC,eAHqB;AAAA,UAIrBxB,gBAJqB,0BAIrBA,gBAJqB;AAAA,UAKrByB,cALqB,0BAKrBA,cALqB;;AAOvB,UAAI,OAAOF,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,eAAO,IAAP;AACD;;AAED,aACE,6BAAC,eAAD,6BACMrC,KADN,EAEMoC,aAFN;AAGE,QAAA,cAAc,EAAEG,cAHlB;AAIE,QAAA,WAAW,EAAE,MAAKvC,KAAL,CAAWS,WAJ1B;AAKE,QAAA,UAAU,EAAE,MAAKT,KAAL,CAAWC,UALzB;AAME,QAAA,QAAQ,EAAE,MAAKqB,SANjB;AAOE,QAAA,cAAc,EAAE,MAAKS,eAPvB;AAQE,QAAA,UAAU,EAAE,MAAKH,WARnB;AASE,QAAA,UAAU,EAAE,MAAKK,WATnB;AAUE,QAAA,gBAAgB,EAAEnB,gBAVpB;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAcD,K;;UAED0B,Y,GAAe,UAAAxC,KAAK;AAAA,aAAI,6BAAC,mCAAD,6BAAqBA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,K;;;;;;;6BAEX;AAAA,mCAOH,KAAKA,KAAL,CAAWW,gBAPR;AAAA,UAEL2B,eAFK,0BAELA,eAFK;AAAA,UAGLC,cAHK,0BAGLA,cAHK;AAAA,UAILzB,gBAJK,0BAILA,gBAJK;AAAA,UAKL2B,mBALK,0BAKLA,mBALK;AAAA,UAMLC,aANK,0BAMLA,aANK;AASP,UAAIC,YAAJ;AACA,UAAIC,YAAJ;AACA,UAAIC,WAAJ;AAXO,UAaC3C,KAbD,GAaW,KAAKF,KAAL,CAAWC,UAbtB,CAaCC,KAbD;AAcP,UAAMM,KAAK,GAAGN,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACJ,KAAnB,CAAd;AAdO,UAeCY,WAfD,GAeiB,KAAKV,KAftB,CAeCU,WAfD;AAgBP,UAAMM,UAAU,GAAGN,WAAW,CAACF,KAAK,CAACS,GAAP,CAA9B;AACA,UAAMQ,OAAO,GAAGT,UAAU,CAACS,OAA3B;AAEA,UAAMqB,aAAa,GACjBrB,OAAO,CAACqB,aAAR,IAAyB,IAAzB,GAAgC,IAAhC,GAAuCrB,OAAO,CAACqB,aADjD;AAGA,UAAI/B,YAAY,GACdU,OAAO,CAACV,YAAR,IAAwB,IAAxB,GACI,KAAKf,KAAL,CAAWW,gBAAX,CAA4BI,YADhC,GAEIU,OAAO,CAACV,YAHd;;AAKA,UAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AACtCA,QAAAA,YAAY,GAAGA,YAAY,CAACb,KAAD,CAA3B;AACD;;AAED,UAAIoC,eAAe,KAAKS,SAApB,IAAiCD,aAArC,EAAoD;AAClD,YAAIP,cAAc,KAAK,QAAvB,EAAiC;AAC/BK,UAAAA,YAAY,GAAG,KAAKT,aAApB;AACD,SAFD,MAEO;AACLQ,UAAAA,YAAY,GAAG,KAAKR,aAApB;AACD;AACF;;AAED,UACGrB,gBAAgB,KAAK,KAArB,IAA8BC,YAAY,KAAK,KAAhD,IACA,OAAO0B,mBAAP,KAA+B,UAFjC,EAGE;AACAI,QAAAA,WAAW,GAAG,KAAKL,YAAnB;AACD;;AAED,UAAMxC,KAAK,GAAG;AACZ0C,QAAAA,aAAa,EAAbA,aADY;AAEZ5B,QAAAA,gBAAgB,EAAhBA,gBAFY;AAGZ2B,QAAAA,mBAAmB,EAAnBA,mBAHY;AAIZ1B,QAAAA,YAAY,EAAZA,YAJY;AAKZ8B,QAAAA,WAAW,EAAXA,WALY;AAMZF,QAAAA,YAAY,EAAZA,YANY;AAOZC,QAAAA,YAAY,EAAZA,YAPY;AAQZI,QAAAA,WAAW,EAAE,KAAKzC,YARN;AASZ0C,QAAAA,aAAa,EAAE,KAAKpD,kBATR;AAUZqD,QAAAA,eAAe,EAAE,KAAKlD,KAAL,CAAWC,UAAX,CAAsBC,KAV3B;AAWZiD,QAAAA,KAAK,EAAEC,MAAM,CAACC;AAXF,OAAd;AAcA,aAAO,6BAAC,mCAAD,6BAAqBrD,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;EAtLmBsD,eAAMC,a;;AAAtB3D,O,CACG4D,Y,GAAe;AACpB5C,EAAAA,IAAI,EAAE,IADc;AAEpB6C,EAAAA,sBAAsB,EAAE,IAFJ;AAIpBf,EAAAA,aAAa,EAAEgB,sBAASC,MAAT,CAAgB;AAC7BC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB;AADoB,GAAhB;AAJK,C;eAwLTlE,O;;;AAEf,IAAMwD,MAAM,GAAGW,wBAAWC,MAAX,CAAkB;AAC/BX,EAAAA,SAAS,EAAE;AACTY,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport { NavigationActions, ResourceSavingSceneView } from 'react-navigation';\n\nclass TabView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true,\n    removedClippedSubviews: true,\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 },\n    }),\n  };\n\n  _handlePageChanged = index => {\n    let { routeName } = this.props.navigation.state.routes[index];\n    this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n  };\n\n  _renderScene = ({ route }) => {\n    const { screenProps, navigation, descriptors } = this.props;\n    const {\n      lazy,\n      removeClippedSubviews,\n      animationEnabled,\n      swipeEnabled,\n    } = this.props.navigationConfig;\n    const descriptor = descriptors[route.key];\n    const focusedIndex = navigation.state.index;\n    const focusedKey = navigation.state.routes[focusedIndex].key;\n    const key = route.key;\n    const TabComponent = descriptor.getComponent();\n    return (\n      <ResourceSavingSceneView\n        lazy={lazy}\n        isFocused={focusedKey === key}\n        removeClippedSubViews={removeClippedSubviews}\n        animationEnabled={animationEnabled}\n        swipeEnabled={swipeEnabled}\n        screenProps={screenProps}\n        component={TabComponent}\n        navigation={navigation}\n        childNavigation={descriptor.navigation}\n      />\n    );\n  };\n\n  _getLabel = ({ route, tintColor, focused }) => {\n    const { screenProps, descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarLabel) {\n      return typeof options.tabBarLabel === 'function'\n        ? options.tabBarLabel({ tintColor, focused })\n        : options.tabBarLabel;\n    }\n\n    if (typeof options.title === 'string') {\n      return options.title;\n    }\n\n    return route.routeName;\n  };\n\n  _getOnPress = (previousScene, { route }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    return options.tabBarOnPress;\n  };\n\n  _getTestIDProps = ({ route }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    return typeof options.tabBarTestIDProps === 'function'\n      ? options.tabBarTestIDProps({ focused })\n      : options.tabBarTestIDProps;\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function'\n        ? options.tabBarIcon({ tintColor, focused })\n        : options.tabBarIcon;\n    }\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const {\n      tabBarOptions,\n      tabBarComponent: TabBarComponent,\n      animationEnabled,\n      tabBarPosition,\n    } = this.props.navigationConfig;\n    if (typeof TabBarComponent === 'undefined') {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...props}\n        {...tabBarOptions}\n        tabBarPosition={tabBarPosition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        getLabel={this._getLabel}\n        getTestIDProps={this._getTestIDProps}\n        getOnPress={this._getOnPress}\n        renderIcon={this._renderIcon}\n        animationEnabled={animationEnabled}\n      />\n    );\n  };\n\n  _renderPager = props => <TabViewPagerPan {...props} />;\n\n  render() {\n    const {\n      tabBarComponent,\n      tabBarPosition,\n      animationEnabled,\n      configureTransition,\n      initialLayout,\n    } = this.props.navigationConfig;\n\n    let renderHeader;\n    let renderFooter;\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    let swipeEnabled =\n      options.swipeEnabled == null\n        ? this.props.navigationConfig.swipeEnabled\n        : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (tabBarComponent !== undefined && tabBarVisible) {\n      if (tabBarPosition === 'bottom') {\n        renderFooter = this._renderTabBar;\n      } else {\n        renderHeader = this._renderTabBar;\n      }\n    }\n\n    if (\n      (animationEnabled === false && swipeEnabled === false) ||\n      typeof configureTransition === 'function'\n    ) {\n      renderPager = this._renderPager;\n    }\n\n    const props = {\n      initialLayout,\n      animationEnabled,\n      configureTransition,\n      swipeEnabled,\n      renderPager,\n      renderHeader,\n      renderFooter,\n      renderScene: this._renderScene,\n      onIndexChange: this._handlePageChanged,\n      navigationState: this.props.navigation.state,\n      style: styles.container,\n    };\n\n    return <TabViewAnimated {...props} />;\n  }\n}\n\nexport default TabView;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}