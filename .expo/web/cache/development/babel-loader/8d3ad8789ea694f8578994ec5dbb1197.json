{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._TESTING_ONLY_reset_container_count = _TESTING_ONLY_reset_container_count;\nexports.default = createNavigationContainer;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _NavigationActions = _interopRequireDefault(require(\"./NavigationActions\"));\n\nvar _getNavigation = _interopRequireDefault(require(\"./getNavigation\"));\n\nvar _invariant = _interopRequireDefault(require(\"./utils/invariant\"));\n\nvar _docsUrl = _interopRequireDefault(require(\"./utils/docsUrl\"));\n\nvar _pathUtils = require(\"./routers/pathUtils\");\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-navigation\\\\src\\\\createNavigationContainer.js\";\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (isStateful(props)) {\n    return;\n  }\n\n  var navigation = props.navigation,\n      screenProps = props.screenProps,\n      containerProps = (0, _objectWithoutProperties2.default)(props, [\"navigation\", \"screenProps\"]);\n  var keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n}\n\nvar _statefulContainerCount = 0;\n\nfunction _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\nvar _reactNavigationIsHydratingState = false;\n\nfunction createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    (0, _inherits2.default)(NavigationContainer, _React$Component);\n    (0, _createClass2.default)(NavigationContainer, null, [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n\n    function NavigationContainer(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, NavigationContainer);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NavigationContainer).call(this, props));\n      _this.subs = null;\n      _this._actionEventSubscribers = new Set();\n\n      _this._handleOpenURL = function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n            enableURLHandling = _this$props.enableURLHandling,\n            uriPrefix = _this$props.uriPrefix;\n\n        if (enableURLHandling === false) {\n          return;\n        }\n\n        var parsedUrl = (0, _pathUtils.urlToPathAndParams)(url, uriPrefix);\n\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n              params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      };\n\n      _this._persistNavigationState = function _callee(nav) {\n        var persistenceKey;\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                persistenceKey = _this.props.persistenceKey;\n\n                if (persistenceKey) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem(persistenceKey, JSON.stringify(nav)));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.dispatch = function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        (0, _invariant.default)(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n\n            dispatchActionEvents();\n\n            _this._persistNavigationState(navState);\n          });\n\n          return true;\n        }\n\n        dispatchActionEvents();\n        return false;\n      };\n\n      _this._getScreenProps = function () {\n        return _this.props.screenProps;\n      };\n\n      validateProps(props);\n      _this._initialAction = _NavigationActions.default.init();\n\n      if (_this._isStateful()) {\n        _this.subs = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(_NavigationActions.default.back());\n          }\n        });\n      }\n\n      _this.state = {\n        nav: _this._isStateful() && !props.persistenceKey ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_validateProps\",\n      value: function _validateProps(props) {\n        if (this._isStateful()) {\n          return;\n        }\n\n        var navigation = props.navigation,\n            screenProps = props.screenProps,\n            containerProps = (0, _objectWithoutProperties2.default)(props, [\"navigation\", \"screenProps\"]);\n        var keys = Object.keys(containerProps);\n\n        if (keys.length !== 0) {\n          throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n        }\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n\n          return;\n        }\n\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var _this$props2, persistenceKey, uriPrefix, enableURLHandling, parsedUrl, startupStateJSON, _url, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;\n\n        return _regenerator.default.async(function componentDidMount$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._isMounted = true;\n\n                if (this._isStateful()) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                if (__DEV__ && !this.props.detached) {\n                  if (_statefulContainerCount > 0) {\n                    if (_reactNative.Platform.OS === 'ios') {\n                      console.warn(\"You should only render one navigator explicitly in your app, and other navigators should by rendered by including them in that navigator. Full details at: \" + (0, _docsUrl.default)('common-mistakes.html#explicitly-rendering-more-than-one-navigator'));\n                    }\n                  }\n                }\n\n                _statefulContainerCount++;\n\n                _reactNative.Linking.addEventListener('url', this._handleOpenURL);\n\n                _this$props2 = this.props, persistenceKey = _this$props2.persistenceKey, uriPrefix = _this$props2.uriPrefix, enableURLHandling = _this$props2.enableURLHandling;\n                parsedUrl = null;\n                startupStateJSON = null;\n\n                if (!(enableURLHandling !== false)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                _context2.t0 = persistenceKey;\n\n                if (!_context2.t0) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.next = 14;\n                return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem(persistenceKey));\n\n              case 14:\n                _context2.t0 = _context2.sent;\n\n              case 15:\n                startupStateJSON = _context2.t0;\n                _context2.next = 18;\n                return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());\n\n              case 18:\n                _url = _context2.sent;\n                parsedUrl = _url && (0, _pathUtils.urlToPathAndParams)(_url, uriPrefix);\n\n              case 20:\n                action = this._initialAction;\n                startupState = this.state.nav;\n\n                if (!startupState) {\n                  !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n                  startupState = Component.router.getStateForAction(action);\n                }\n\n                if (startupStateJSON) {\n                  try {\n                    startupState = JSON.parse(startupStateJSON);\n                    _reactNavigationIsHydratingState = true;\n                  } catch (e) {}\n                }\n\n                if (parsedUrl) {\n                  _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;\n                  urlAction = Component.router.getActionForPathAndParams(path, params);\n\n                  if (urlAction) {\n                    !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', url);\n                    action = urlAction;\n                    startupState = Component.router.getStateForAction(urlAction, startupState);\n                  }\n                }\n\n                dispatchActions = function dispatchActions() {\n                  return _this2._actionEventSubscribers.forEach(function (subscriber) {\n                    return subscriber({\n                      type: 'action',\n                      action: action,\n                      state: _this2.state.nav,\n                      lastState: null\n                    });\n                  });\n                };\n\n                if (!(startupState === this.state.nav)) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                dispatchActions();\n                return _context2.abrupt(\"return\");\n\n              case 29:\n                this.setState({\n                  nav: startupState\n                }, function () {\n                  _reactNavigationIsHydratingState = false;\n                  dispatchActions();\n                });\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e, errorInfo) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..');\n          this.dispatch(_NavigationActions.default.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._isMounted = false;\n\n        _reactNative.Linking.removeEventListener('url', this._handleOpenURL);\n\n        this.subs && this.subs.remove();\n\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var navigation = this.props.navigation;\n\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n\n          if (!navState) {\n            return this._renderLoading();\n          }\n\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = (0, _getNavigation.default)(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n\n          navigation = this._navigation;\n        }\n\n        (0, _invariant.default)(navigation, 'failed to get navigation');\n        return _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {\n          navigation: navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376\n          }\n        }));\n      }\n    }]);\n    return NavigationContainer;\n  }(_react.default.Component);\n\n  NavigationContainer.router = Component.router;\n  NavigationContainer.navigationOptions = null;\n  return (0, _reactLifecyclesCompat.polyfill)(NavigationContainer);\n}","map":{"version":3,"sources":["C:/React/magic/node_modules/react-navigation/src/createNavigationContainer.js"],"names":["isStateful","props","navigation","validateProps","screenProps","containerProps","keys","Object","length","Error","join","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","nextProps","prevState","subs","_actionEventSubscribers","Set","_handleOpenURL","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","_persistNavigationState","nav","persistenceKey","AsyncStorage","setItem","JSON","stringify","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_getScreenProps","_initialAction","NavigationActions","init","_isStateful","BackHandler","addEventListener","_isMounted","remove","back","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","console","group","log","groupEnd","newState","__DEV__","detached","Platform","OS","warn","Linking","startupStateJSON","getItem","getInitialURL","startupState","parse","e","urlAction","dispatchActions","errorInfo","removeEventListener","_renderLoading","_navigation","React","navigationOptions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { AsyncStorage, Linking, Platform, BackHandler } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport NavigationActions from './NavigationActions';\nimport getNavigation from './getNavigation';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\nimport { urlToPathAndParams } from './routers/pathUtils';\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (isStateful(props)) {\n    return;\n  }\n\n  const { navigation, screenProps, ...containerProps } = props;\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful()) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.persistenceKey\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _validateProps(props) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error(\n          'This navigator has both navigation and container props, so it is ' +\n            `unclear if it should own its own state. Remove props: \"${keys.join(\n              ', '\n            )}\" ` +\n            'if the navigator should get its state from the navigation prop. If the ' +\n            'navigator should maintain its own state, do not pass a navigation prop.'\n        );\n      }\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        /* eslint-disable no-console */\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        /* eslint-enable no-console */\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (__DEV__ && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should by rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      const { persistenceKey, uriPrefix, enableURLHandling } = this.props;\n      let parsedUrl = null;\n      let startupStateJSON = null;\n      if (enableURLHandling !== false) {\n        startupStateJSON =\n          persistenceKey && (await AsyncStorage.getItem(persistenceKey));\n        const url = await Linking.getInitialURL();\n        parsedUrl = url && urlToPathAndParams(url, uriPrefix);\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      let startupState = this.state.nav;\n      if (!startupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull persisted state from AsyncStorage\n      if (startupStateJSON) {\n        try {\n          startupState = JSON.parse(startupStateJSON);\n          _reactNavigationIsHydratingState = true;\n        } catch (e) {}\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log('Applying Navigation Action for Initial URL:', url);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach(subscriber =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    componentDidCatch(e, errorInfo) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async nav => {\n      const { persistenceKey } = this.props;\n      if (!persistenceKey) {\n        return;\n      }\n      await AsyncStorage.setItem(persistenceKey, JSON.stringify(nav));\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n      return <Component {...this.props} navigation={navigation} />;\n    }\n  }\n\n  return polyfill(NavigationContainer);\n}\n"]},"metadata":{},"sourceType":"script"}