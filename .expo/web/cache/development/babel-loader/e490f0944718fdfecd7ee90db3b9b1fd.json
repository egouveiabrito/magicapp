{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Icon = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _getIconType = _interopRequireDefault(require(\"../helpers/getIconType\"));\n\nvar _config = require(\"../config\");\n\nvar _jsxFileName = \"C:\\\\React\\\\magic\\\\node_modules\\\\react-native-elements\\\\src\\\\icons\\\\Icon.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Icon = function Icon(props) {\n  var type = props.type,\n      name = props.name,\n      size = props.size,\n      color = props.color,\n      iconStyle = props.iconStyle,\n      underlayColor = props.underlayColor,\n      reverse = props.reverse,\n      raised = props.raised,\n      containerStyle = props.containerStyle,\n      reverseColor = props.reverseColor,\n      disabled = props.disabled,\n      disabledStyle = props.disabledStyle,\n      onPress = props.onPress,\n      _props$Component = props.Component,\n      Component = _props$Component === void 0 ? onPress ? _reactNative.TouchableHighlight : _reactNative.View : _props$Component,\n      attributes = (0, _objectWithoutProperties2.default)(props, [\"type\", \"name\", \"size\", \"color\", \"iconStyle\", \"underlayColor\", \"reverse\", \"raised\", \"containerStyle\", \"reverseColor\", \"disabled\", \"disabledStyle\", \"onPress\", \"Component\"]);\n  var IconComponent = (0, _getIconType.default)(type);\n\n  var getBackgroundColor = function getBackgroundColor() {\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? 'white' : 'transparent';\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: containerStyle && containerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    }\n  }, _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {\n    underlayColor: reverse ? color : underlayColor || color,\n    style: _reactNative.StyleSheet.flatten([(reverse || raised) && styles.button, (reverse || raised) && {\n      borderRadius: size + 4,\n      height: size * 2 + 4,\n      width: size * 2 + 4\n    }, raised && styles.raised, {\n      backgroundColor: getBackgroundColor(),\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, disabled && styles.disabled, disabled && disabledStyle])\n  }, onPress && {\n    disabled: disabled\n  }, {\n    onPress: onPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    }\n  }), _react.default.createElement(IconComponent, {\n    testID: \"iconIcon\",\n    style: _reactNative.StyleSheet.flatten([{\n      backgroundColor: 'transparent'\n    }, iconStyle && iconStyle]),\n    size: size,\n    name: name,\n    color: reverse ? reverseColor : color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    }\n  })));\n};\n\nexports.Icon = Icon;\nIcon.propTypes = {\n  type: _propTypes.default.string,\n  name: _propTypes.default.string,\n  size: _propTypes.default.number,\n  color: _propTypes.default.string,\n  Component: _propTypes.default.elementType,\n  underlayColor: _propTypes.default.string,\n  reverse: _propTypes.default.bool,\n  raised: _propTypes.default.bool,\n  containerStyle: _config.ViewPropTypes.style,\n  iconStyle: _reactNative.Text.propTypes.style,\n  onPress: _propTypes.default.func,\n  reverseColor: _propTypes.default.string,\n  disabled: _propTypes.default.bool,\n  disabledStyle: _config.ViewPropTypes.style\n};\nIcon.defaultProps = {\n  underlayColor: 'white',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white',\n  disabled: false,\n  type: 'material'\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    margin: 7\n  },\n  raised: _objectSpread({}, _reactNative.Platform.select({\n    android: {\n      elevation: 2\n    },\n    default: {\n      shadowColor: 'rgba(0,0,0, .4)',\n      shadowOffset: {\n        height: 1,\n        width: 1\n      },\n      shadowOpacity: 1,\n      shadowRadius: 1\n    }\n  })),\n  disabled: {\n    backgroundColor: '#D1D5D8'\n  }\n});\n\nvar _default = (0, _config.withTheme)(Icon, 'Icon');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/React/magic/node_modules/react-native-elements/src/icons/Icon.js"],"names":["Icon","props","type","name","size","color","iconStyle","underlayColor","reverse","raised","containerStyle","reverseColor","disabled","disabledStyle","onPress","Component","TouchableHighlight","View","attributes","IconComponent","getBackgroundColor","StyleSheet","flatten","styles","button","borderRadius","height","width","backgroundColor","alignItems","justifyContent","propTypes","PropTypes","string","number","elementType","bool","ViewPropTypes","style","NativeText","func","defaultProps","create","margin","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Platform,\n  TouchableHighlight,\n  View,\n  StyleSheet,\n  Text as NativeText,\n} from 'react-native';\n\nimport getIconType from '../helpers/getIconType';\nimport { ViewPropTypes, withTheme } from '../config';\n\nconst Icon = props => {\n  const {\n    type,\n    name,\n    size,\n    color,\n    iconStyle,\n    underlayColor,\n    reverse,\n    raised,\n    containerStyle,\n    reverseColor,\n    disabled,\n    disabledStyle,\n    onPress,\n    Component = onPress ? TouchableHighlight : View,\n    ...attributes\n  } = props;\n\n  const IconComponent = getIconType(type);\n  const getBackgroundColor = () => {\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? 'white' : 'transparent';\n  };\n\n  return (\n    <View style={containerStyle && containerStyle}>\n      <Component\n        {...attributes}\n        underlayColor={reverse ? color : underlayColor || color}\n        style={StyleSheet.flatten([\n          (reverse || raised) && styles.button,\n          (reverse || raised) && {\n            borderRadius: size + 4,\n            height: size * 2 + 4,\n            width: size * 2 + 4,\n          },\n          raised && styles.raised,\n          {\n            backgroundColor: getBackgroundColor(),\n            alignItems: 'center',\n            justifyContent: 'center',\n          },\n          disabled && styles.disabled,\n          disabled && disabledStyle,\n        ])}\n        {...onPress && { disabled }}\n        onPress={onPress}\n      >\n        <IconComponent\n          testID=\"iconIcon\"\n          style={StyleSheet.flatten([\n            { backgroundColor: 'transparent' },\n            iconStyle && iconStyle,\n          ])}\n          size={size}\n          name={name}\n          color={reverse ? reverseColor : color}\n        />\n      </Component>\n    </View>\n  );\n};\n\nIcon.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  Component: PropTypes.elementType,\n  underlayColor: PropTypes.string,\n  reverse: PropTypes.bool,\n  raised: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  iconStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  reverseColor: PropTypes.string,\n  disabled: PropTypes.bool,\n  disabledStyle: ViewPropTypes.style,\n};\n\nIcon.defaultProps = {\n  underlayColor: 'white',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white',\n  disabled: false,\n  type: 'material',\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    margin: 7,\n  },\n  raised: {\n    ...Platform.select({\n      android: {\n        elevation: 2,\n      },\n      default: {\n        shadowColor: 'rgba(0,0,0, .4)',\n        shadowOffset: { height: 1, width: 1 },\n        shadowOpacity: 1,\n        shadowRadius: 1,\n      },\n    }),\n  },\n  disabled: {\n    backgroundColor: '#D1D5D8',\n  },\n});\n\nexport { Icon };\nexport default withTheme(Icon, 'Icon');\n"]},"metadata":{},"sourceType":"script"}